"use strict";function Router(e,t){e.state("challengesIndex",{url:"/challenges",templateUrl:"/templates/challengesIndex.html",controller:"ChallengesIndexController as challengesIndex"}).state("challengesNew",{url:"/challenges/new",templateUrl:"/templates/challengesNew.html",controller:"ChallengesNewController as challengesNew"}).state("challengesShow",{url:"/challenges/:id",templateUrl:"/templates/challengesShow.html",controller:"ChallengesShowController as challengesShow"}).state("challengesEdit",{url:"/challenges/:id/edit",templateUrl:"/templates/challengesEdit.html",controller:"ChallengesEditController as challengesEdit"}).state("register",{url:"/register",templateUrl:"/templates/register.html",controller:"RegisterController as register"}).state("login",{url:"/login",templateUrl:"/templates/login.html",controller:"LoginController as login"}).state("home",{url:"/",templateUrl:"/templates/home.html"}).state("usersIndex",{url:"/challengers",templateUrl:"/templates/usersIndex.html",controller:"UsersIndexController as usersIndex"}).state("usersEdit",{url:"/challengers/:id/edit",templateUrl:"/templates/usersEdit.html",controller:"UsersEditController as usersEdit"}).state("usersShow",{url:"/challengers/:id",templateUrl:"/templates/usersShow.html",controller:"UsersShowController as usersShow"}).state("storiesIndex",{url:"/stories",templateUrl:"/templates/storyIndex.html",controller:"StoriesIndexController as storiesIndex"}).state("storysEdit",{url:"/stories/:id/edit",templateUrl:"/templates/storyEdit.html",controller:"StoriesEditController as storiesEdit"}).state("storiesShow",{url:"/stories/:id",templateUrl:"/templates/storyShow.html",controller:"StoriesShowController as storiesShow"}),t.otherwise("/challenges")}function Auth(e){e.loginUrl="/login",e.signupUrl="/register",e.tokenPrefix=""}function RegisterController(e,t){function r(){e.signup(l.user).then(function(){t.go("home")})}var l=this;l.user={},l.submit=r}function LoginController(e,t,r,l){function o(){n.isLoggedIn=!0,console.log(n.isLoggedIn),e.login(n.credentials).then(function(){n.currentUser=e.getPayload(),n.currentUser&&r.get({id:n.currentUser._id},function(e){l.account=e,console.log(l.currentUser)}),t.go("home")})}var n=this;n.credentials={},n.submit=o}function Challenge(e){return new e("/challenges/:id",{id:"@_id"},{update:{method:"PUT"}})}function ChallengesIndexController(e){var t=this;t.all=e.query()}function ChallengesNewController(e,t){function r(){e.save(l.challenge,function(){t.go("challengesIndex")})}var l=this;l.challenge={},l.create=r}function ChallengesShowController(e,t,r,l){function o(){u.challenge.$remove(function(){r.go("challengesIndex")})}function n(){var e=u.challenge.like.indexOf(u.authUser);!u.challenge.like.includes(u.authUser)&&u.authUser?(u.challenge.like.push(u.authUser),u.challenge.$update()):u.challenge.like.includes(u.authUser)&&u.authUser&&(u.challenge.like.splice(e,1),u.challenge.$update())}function s(){u.challenge.participants.data.push(u.authUser),u.challenge.participants.userId.push(u.authUser),u.challenge.$update(function(e){console.log(e)}),u.userProfile.activeChallenges.push(u.challenge._id),u.challenge.$update(),u.userProfile.$update()}function a(){var e=u.challenge.participants.userId.indexOf(u.authUser);u.challenge.participants.userId.splice(e,1),console.log(u.challenge.participants.userId)}function i(){console.log("In toggle pop up"),u.popUpActive=!0}var u=this;u.authUser=l.getPayload(),u.authUser&&(u.authUser=u.authUser._id,t.get({id:u.authUser},function(e){u.userProfile=e})),u.challenge=e.get(r.params),u.togglePopUp=i,u.Unparticipate=a,u.participate=s,u.incrementLikes=n,u.isLoggedIn=l.isAuthenticated,u.delete=o}function ChallengesEditController(e,t){function r(){l.challenge.$update(function(){t.go("challengesShow",t.params)})}var l=this;l.challenge=e.get(t.params),this.update=r}function currentUser(e,t){var r=this,l=t.getPayload();l&&e.get({id:l._id},function(e){r.account=e})}function dragDrop(){var e=new FileReader;return{restrict:"E",place:!0,templateUrl:"templates/dragDrop.html",link:function(t,r){e.onload=function(){},r.on("dragover",function(e){e.preventDefault()}).on("drop",function(t){t.preventDefault();var r=(t.target.files||t.dataTransfer.files)[0];e.readAsDataURL(r)})}}}function MainController(e){function t(){console.log("in toggle menu"),r.menuActive=!r.menuActive,console.log(r.menuActive)}var r=this;r.isLoggedIn=e.isAuthenticated,r.currentUser=e.getPayload(),r.toggleMenu=t}function ProfileController(e,t,r,l){function o(){e.logout().then(function(){n.account=null,t.go("home")})}var n=this;n.isLoggedIn=e.isAuthenticated,e.getPayload()&&(n.currentUserId=e.getPayload()._id),n.currentUser=l,n.isLoggedIn()&&r.get({id:n.currentUserId},function(e){l.account=e}),n.logout=o,n.message=null}function StoriesIndexController(e){var t=this;t.all=e.query()}function StoriesNewController(e,t){function r(){e.save(l.story,function(){t.go("storyIndex")})}var l=this;l.story={},l.create=r}function StoriesShowController(e,t,r){function l(){o.story.$remove(function(){t.go("storiesIndex")})}var o=this;e.get(t.params,function(e){o.story=e,o.authStory=r.getPayload(),o.authStory&&(o.authStory=o.authStory._id),o.isLoggedIn=r.isAuthenticated,o.delete=l})}function StoriesEditController(e,t,r){function l(){o.story.$update(function(e){console.log(e.bio),t.go("storiesShow",{id:o.authUser})})}var o=this;o.authUser=r.getPayload(),o.authUser&&(o.authUser=o.authUser._id),e.get({id:o.authUser},function(e){o.story=e}),o.update=l}function Story(e){return new e("/stories/:id",{id:"@_id"},{update:{method:"PUT"}})}function User(e){return new e("/users/:id",{id:"@_id"},{update:{method:"PUT"}})}function user(){var e=this;e.account={}}function UsersIndexController(e){var t=this;t.all=e.query()}function UsersNewController(e,t){function r(){e.save(l.user,function(){t.go("userIndex")})}var l=this;l.user={},l.create=r}function UsersShowController(e,t,r){function l(){var e=n.user.likes.indexOf(n.authUser);!n.user.likes.includes(n.authUser)&&n.authUser?(n.user.likes.push(n.authUser),n.user.$update()):n.user.likes.includes(n.authUser)&&n.authUser&&(n.user.likes.splice(e,1),n.user.$update())}function o(){n.user.$remove(function(){t.go("usersIndex")})}var n=this;e.get(t.params,function(e){n.user=e,n.authUser=r.getPayload(),n.authUser&&(n.authUser=n.authUser._id),n.incrementLikes=l,n.isLoggedIn=r.isAuthenticated,n.delete=o})}function UsersEditController(e,t,r){function l(){o.user.$update(function(e){console.log(e.bio),t.go("usersShow",{id:o.authUser})})}var o=this;o.authUser=r.getPayload(),o.authUser&&(o.authUser=o.authUser._id),e.get({id:o.authUser},function(e){o.user=e,console.log(o.user)}),o.update=l}angular.module("goApp",["ngResource","ui.router","satellizer"]).config(Router).config(Auth),Router.$inject=["$stateProvider","$urlRouterProvider"],Auth.$inject=["$authProvider"],angular.module("goApp").controller("RegisterController",RegisterController).controller("LoginController",LoginController),RegisterController.$inject=["$auth","$state"],LoginController.$inject=["$auth","$state","User","user"],angular.module("goApp").factory("Challenge",Challenge),Challenge.$inject=["$resource"],angular.module("goApp").controller("ChallengesIndexController",ChallengesIndexController).controller("ChallengesNewController",ChallengesNewController).controller("ChallengesShowController",ChallengesShowController).controller("ChallengesEditController",ChallengesEditController),ChallengesIndexController.$inject=["Challenge"],ChallengesNewController.$inject=["Challenge","$state"],ChallengesShowController.$inject=["Challenge","User","$state","$auth"],ChallengesEditController.$inject=["Challenge","$state"],angular.module("goApp").service("currentUser",currentUser),currentUser.$inject=["User","$auth"],angular.module("goApp").directive("dragDrop",dragDrop),angular.module("goApp").controller("MainController",MainController),MainController.$inject=["$auth"],angular.module("goApp").controller("ProfileController",ProfileController),ProfileController.$inject=["$auth","$state","User","user"],angular.module("goApp").controller("StoriesIndexController",StoriesIndexController).controller("StoriesNewController",StoriesNewController).controller("StoriesShowController",StoriesShowController).controller("StoriesEditController",StoriesEditController),StoriesIndexController.$inject=["Story"],StoriesNewController.$inject=["Story","$state"],StoriesShowController.$inject=["Story","$state","$auth"],StoriesEditController.$inject=["Story","$state","$auth"],angular.module("goApp").factory("Story",Story),Story.$inject=["$resource"],angular.module("goApp").factory("User",User),User.$inject=["$resource"],angular.module("goApp").service("user",user),angular.module("goApp").controller("UsersIndexController",UsersIndexController).controller("UsersNewController",UsersNewController).controller("UsersShowController",UsersShowController).controller("UsersEditController",UsersEditController),UsersIndexController.$inject=["User"],UsersNewController.$inject=["User","$state"],UsersShowController.$inject=["User","$state","$auth"],UsersEditController.$inject=["User","$state","$auth"];
//# sourceMappingURL=app.js.map
