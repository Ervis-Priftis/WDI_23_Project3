{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/challenge.js","js/controllers/challenges.js","js/services/currentUser.js","js/models/entry.js","js/directives/googleMap.js","js/controllers/main.js","js/controllers/profile.js","js/controllers/stories.js","js/models/story.js","js/services/user.js","js/models/user.js","js/controllers/users.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","ConfirmController","$http","method","params","confirmationCode","LoginController","User","login","isLoggedIn","console","log","credentials","currentUser","getPayload","get","id","_id","data","account","Challenge","$resource","update","ChallengesIndexController","challengesIndex","all","query","ChallengesNewController","create","save","challengesNew","challenge","ChallengesShowController","deleteChallenge","challengesShow","$remove","challengeLike","userIdIndex","like","indexOf","payload","includes","push","$update","splice","participate","indexId","participants","findIndex","participant","userProfile","reload","Unparticipate","togglePopUp","popUpActive","addComment","comments","comment","isSubscribed","filter","length","$promise","incrementLikes","isAuthenticated","ChallengesEditController","challengesEdit","StoryEntries","googleplace","$window","restrict","require","link","scope","element","attrs","model","options","types","componentRestrictions","autocomplete","google","maps","places","Autocomplete","addListener","res","status","$setViewValue","val","googleMap","replace","template","$watch","map","Map","center","location","zoom","scrollwheel","Marker","position","animation","Animation","DROP","MainController","toggleMenu","main","menuActive","ProfileController","logout","profile","currentUserId","message","StoriesIndexController","Story","storiesIndex","StoriesCreateController","storiesCreate","story","authUser","userInfo","userId","StoriesCreateEntryController","addEntry","storiesCreateEntry","entries","new","order","StoriesShowController","deleteStory","storiesShow","delete","StoriesEditController","storiesEdit","entry","self","UsersIndexController","usersIndex","UsersNewController","usersNew","UsersShowController","userLikes","usersShow","likes","deleteUser","UsersEditController","usersEdit","angular","module","config","$inject","factory","service","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('goApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('challengesIndex', {\n      url: '/challenges',\n      templateUrl: '/templates/challengesIndex.html',\n      controller: 'ChallengesIndexController as challengesIndex'\n    })\n    .state('challengesNew', {\n      url: '/challenges/new',\n      templateUrl: '/templates/challengesNew.html',\n      controller: 'ChallengesNewController as challengesNew'\n    })\n    .state('challengesShow', {\n      url: '/challenges/:id',\n      templateUrl: '/templates/challengesShow.html',\n      controller: 'ChallengesShowController as challengesShow'\n    })\n    .state('challengesEdit', {\n      url: '/challenges/:id/edit',\n      templateUrl: '/templates/challengesEdit.html',\n      controller: 'ChallengesEditController as challengesEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('registerInterim', {\n      url: '/registerInterim',\n      templateUrl: '/templates/registerInterim.html'\n    })\n    .state('confirm', {\n      url: '/confirm/:confirmationCode',\n      templateUrl: '/templates/confirm.html',\n      controller: 'ConfirmController as confirm'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n      // controller: 'HomeController as home'\n    })\n    .state('usersIndex', {\n      url: '/challengers',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersEdit', {\n      url: '/challengers/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('usersShow', {\n      url: '/challengers/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('storiesIndex', {\n      url: '/stories',\n      templateUrl: '/templates/storyIndex.html',\n      controller: 'StoriesIndexController as storiesIndex'\n    })\n    .state('storiesCreate', {\n      url: '/stories/new',\n      templateUrl: '/templates/storyCreate.html',\n      controller: 'StoriesCreateController as storiesCreate'\n    })\n    .state('storiesCreateEntry', {\n      url: '/stories/:id/newEntry',\n      templateUrl: '/templates/storyCreateEntry.html',\n      controller: 'StoriesCreateEntryController as storiesCreateEntry'\n    })\n    .state('storiesEdit', {\n      url: '/stories/entries/:id/',\n      templateUrl: '/templates/storyEdit.html',\n      controller: 'StoriesEditController as storiesEdit'\n    })\n    .state('storiesShow', {\n      url: '/stories/:id',\n      templateUrl: '/templates/storyShow.html',\n      controller: 'StoriesShowController as storiesShow'\n    });\n\n  $urlRouterProvider.otherwise('/challenges');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('goApp')\n.controller('RegisterController', RegisterController)\n.controller('ConfirmController', ConfirmController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('registerInterim');\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nConfirmController.$inject = ['$http', '$state'];\nfunction ConfirmController($http, $state) {\n  $http({\n    method: 'POST',\n    url: `/confirm/${$state.params.confirmationCode}`\n  });\n}\n\n\nLoginController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction LoginController($auth, $state, User, user) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    login.isLoggedIn = true;\n    console.log(login.isLoggedIn);\n    $auth.login(login.credentials)\n    .then(() => {\n      login.currentUser = $auth.getPayload();\n\n      if(login.currentUser) {\n        User.get({ id: login.currentUser._id }, (data) => {\n          user.account = data;\n          console.log(user.currentUser);\n        });\n      }\n      $state.go('home');\n    });\n  }\n  login.submit = submit;\n}\n","angular.module('goApp')\n  .factory('Challenge', Challenge);\n\nChallenge.$inject = ['$resource'];\nfunction Challenge($resource) {\n  return new $resource('/challenges/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('ChallengesIndexController', ChallengesIndexController)\n  .controller('ChallengesNewController', ChallengesNewController)\n  .controller('ChallengesShowController', ChallengesShowController)\n  .controller('ChallengesEditController', ChallengesEditController);\n\nChallengesIndexController.$inject = ['Challenge'];\nfunction ChallengesIndexController(Challenge) {\n  const challengesIndex = this;\n  challengesIndex.all = Challenge.query();\n  // console.log('In the challenge index controller');\n}\n\n\nChallengesNewController.$inject = ['Challenge', '$state'];\nfunction ChallengesNewController(Challenge, $state) {\n  const challengesNew = this;\n\n  challengesNew.challenge = {};\n\n  function create() {\n    Challenge.save(challengesNew.challenge, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  challengesNew.create = create;\n}\n\n//SHOW\nChallengesShowController.$inject = ['Challenge', 'User', '$state', '$auth'];\nfunction ChallengesShowController(Challenge, User, $state, $auth) {\n\n  const challengesShow = this;\n  const payload = $auth.getPayload();\n\n  if (payload) {\n    User.get({ id: payload._id }, (data)=> {\n      challengesShow.userProfile = data;\n    });\n  }\n\n\n  Challenge.get($state.params).$promise.then((challenge) => {\n    challengesShow.challenge = challenge;\n  });\n\n  function deleteChallenge() {\n    challengesShow.challenge.$remove(() => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  function challengeLike() {\n    const userIdIndex = challengesShow.challenge.like.indexOf(payload._id);\n\n    if (!challengesShow.challenge.like.includes(payload._id) && !!payload._id) {\n      challengesShow.challenge.like.push(payload._id);\n      challengesShow.challenge.$update();\n    } else if (challengesShow.challenge.like.includes(payload._id) && !!payload._id) {\n      challengesShow.challenge.like.splice(userIdIndex, 1);\n      challengesShow.challenge.$update();\n    }\n  }\n\n  function participate() {\n    const indexId = challengesShow.challenge.participants.findIndex((participant) => {\n      return payload._id === participant._id;\n    });\n    if(indexId === -1) {\n      challengesShow.challenge.participants.push(challengesShow.userProfile);\n      console.log(challengesShow.challenge.participants);\n\n      challengesShow.challenge.$update(() => {\n        $state.reload();\n      });\n    }\n  }\n\n  function Unparticipate() {\n    const indexId = challengesShow.challenge.participants.findIndex((participant) => {\n      return payload._id === participant._id;\n    });\n    challengesShow.challenge.participants.splice(indexId, 1);\n    challengesShow.challenge.$update(() => {\n      $state.reload();\n    });\n  }\n\n  function togglePopUp() {\n    // console.log('In toggle pop up');\n\n    challengesShow.popUpActive = !challengesShow.popUpActive;\n  }\n\n  function addComment(){\n    challengesShow.challenge.comments.push(challengesShow.comment);\n    challengesShow.challenge.$update(() => {\n      challengesShow.comment = '';\n    });\n  }\n\n  function isSubscribed() {\n    if(challengesShow.challenge) {\n      return challengesShow.challenge.participants.filter((participant) => {\n        return payload._id === participant._id;\n      }).length > 0;\n    }\n  }\n\n  challengesShow.isSubscribed = isSubscribed;\n  challengesShow.addComment = addComment;\n  challengesShow.togglePopUp = togglePopUp;\n  challengesShow.Unparticipate = Unparticipate;\n  challengesShow.participate = participate;\n  challengesShow.incrementLikes = challengeLike;\n  challengesShow.isLoggedIn = $auth.isAuthenticated;\n  challengesShow.deleteChallenge = deleteChallenge;\n}\n\nChallengesEditController.$inject = ['Challenge', '$state'];\nfunction ChallengesEditController(Challenge, $state) {\n  const challengesEdit = this;\n\n  challengesEdit.challenge = Challenge.get($state.params);\n\n  function update() {\n    challengesEdit.challenge.$update(() => {\n      $state.go('challengesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('goApp')\n  .service('currentUser', currentUser);\n\ncurrentUser.$inject = ['User', '$auth'];\nfunction currentUser (User, $auth) {\n  var user = this;\n\n  // const isLoggedIn = $auth.isAuthenticated;\n  const currentUser = $auth.getPayload();\n\n  if(currentUser) {\n    User.get({ id: currentUser._id }, (data) => {\n      user.account = data;\n    });\n  }\n}\n","angular\n  .module('goApp')\n  .factory('StoryEntries', StoryEntries);\n\nStoryEntries.$inject = ['$resource'];\n\nfunction StoryEntries($resource) {\n  return new $resource('/stories/entries/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .directive('googleMap', googleMap)\n  .directive('googleplace', googleplace);\n\n\n\n// let geocoder = new google.maps.Geocoder();\n// geocoder.geocode( { 'address': $scope.textfield }, function(results, status) {\n//   if(status === google.maps.GeocoderStatus.OK && results.length > 0) {\n//     let location = results[0].geometry.location;\n//     $scope.myMap.panTo(location);\n//   }\n// });\ngoogleplace.$inject = ['$window'];\nfunction googleplace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function(scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: {}\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', (res, status) => {\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n\ngoogleMap.$inject = ['$window', 'Challenge'];\nfunction googleMap($window, Challenge) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\">Google Map HERE</div>',\n    scope: {\n      challenge: '='\n    },\n    link: function(scope, element) {\n      scope.$watch('challenge', () => {\n        if(scope.challenge) {\n\n          const map = new $window.google.maps.Map(element[0], {\n            center: scope.challenge.location,\n            zoom: 6,\n            scrollwheel: false\n          });\n\n          new $window.google.maps.Marker({\n            position: scope.challenge.location,\n            map: map,\n            animation: $window.google.maps.Animation.DROP\n          });\n        }\n      });\n\n    }\n  };\n}\n","angular.module('goApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth'];\nfunction MainController($auth) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.currentUser = $auth.getPayload();\n\n  function toggleMenu() {\n    console.log('in toggle menu');\n    main.menuActive = !main.menuActive;\n    console.log(main.menuActive);\n  }\n  main.toggleMenu = toggleMenu;\n\n\n\n\n\n\n\n\n\n  // main.getProfile = getProfile;\n\n  // const protectedStates = ['playersEdit', 'playersNew'];\n  //\n  // function secureState(e, toState) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //   }\n  // }\n\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n}\n","angular.module('goApp')\n  .controller('ProfileController', ProfileController);\n\nProfileController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction ProfileController($auth, $state, User, user) {\n  const profile = this;\n\n  profile.isLoggedIn = $auth.isAuthenticated;\n  \n  if ($auth.getPayload()){\n    profile.currentUserId = $auth.getPayload()._id;\n  }\n  profile.currentUser = user;\n\n  if(profile.isLoggedIn()) {\n    User.get({ id: profile.currentUserId }, (data) => {\n      user.account = data;\n    });\n  }\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        profile.account = null;\n        $state.go('home');\n      });\n  }\n  profile.logout = logout;\n\n  profile.message = null;\n}\n","angular.module('goApp')\n  .controller('StoriesIndexController', StoriesIndexController)\n  .controller('StoriesCreateController', StoriesCreateController)\n  .controller('StoriesCreateEntryController', StoriesCreateEntryController)\n  .controller('StoriesShowController', StoriesShowController)\n  .controller('StoriesEditController', StoriesEditController);\n\n\n//INDEX\nStoriesIndexController.$inject = ['Story'];\nfunction StoriesIndexController(Story) {\n  const storiesIndex = this;\n  storiesIndex.all = Story.query();\n}\n\n//CREATE\nStoriesCreateController.$inject = ['Story', '$state', '$auth', 'User'];\nfunction StoriesCreateController(Story, $state, $auth, User) {\n  const storiesCreate = this;\n\n  storiesCreate.authUser = $auth.getPayload();\n  if (storiesCreate.authUser) {\n    storiesCreate.authUser = storiesCreate.authUser._id;\n  }\n\n  User.get({ id: storiesCreate.authUser }, (data) => {\n    storiesCreate.userInfo = data;\n  });\n\n  storiesCreate.story = {\n    userId: storiesCreate.authUser\n  };\n\n  function create() {\n    Story.save(storiesCreate.story, (data) => {\n      $state.go('storiesCreateEntry', {id: data._id});\n    });\n  }\n  storiesCreate.create = create;\n}\n\n// Create entry\nStoriesCreateEntryController.$inject = ['Story', '$state', '$auth'];\nfunction StoriesCreateEntryController(Story, $state, $auth) {\n  const storiesCreateEntry = this;\n\n  storiesCreateEntry.authUser = $auth.getPayload();\n  if (storiesCreateEntry.authUser) {\n    storiesCreateEntry.authUser = storiesCreateEntry.authUser._id;\n  }\n\n  Story.get( $state.params, (data) => {\n    storiesCreateEntry.story = data;\n\n\n    storiesCreateEntry.new = {\n      order: storiesCreateEntry.story.entries.length + 1\n    };\n  });\n\n  function addEntry() {\n    storiesCreateEntry.story.entries.push(storiesCreateEntry.new);\n\n    storiesCreateEntry.story.$update(() => {\n      $state.go('storiesShow', $state.params );\n    });\n  }\n\n  storiesCreateEntry.addEntry = addEntry;\n}\n\n//SHOW & DELETE\nStoriesShowController.$inject = ['Story', '$state', '$auth'];\nfunction StoriesShowController(Story, $state, $auth) {\n  const storiesShow = this;\n\n  Story.get($state.params, (data) => {\n    storiesShow.story = data;\n\n    storiesShow.authUser = $auth.getPayload();\n    if (storiesShow.authUser) {\n      storiesShow.authUser = storiesShow.authUser._id;\n    }\n\n    storiesShow.isLoggedIn = $auth.isAuthenticated;\n    storiesShow.delete = deleteStory;\n  });\n\n  function deleteStory() {\n    storiesShow.story.$remove(() => {\n      $state.go('storiesIndex');\n    });\n  }\n}\n\n//EDIT\nStoriesEditController.$inject = ['Story', '$state'];\nfunction StoriesEditController(Story, $state) {\n  const storiesEdit = this;\n  console.log('I am working');\n\n  Story.get($state.params, (data) => {\n    storiesEdit.entry = data;\n  });\n\n  function update() {\n    console.log(storiesEdit.entry);\n    // storiesEdit.entry.$update((data) => {\n    //   $state.go('storiesShow', { id: storiesEdit.authUser });\n    // });\n  }\n\n  storiesEdit.update = update;\n}\n","angular\n  .module('goApp')\n  .factory('Story', Story);\n\nStory.$inject = ['$resource'];\n\nfunction Story($resource) {\n  return new $resource('/stories/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .service('user', user);\n\nfunction user() {\n  var self = this;\n\n  self.account = {};\n}\n","angular\n  .module('goApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\n\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\n//INDEX\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n//CREATE\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('userIndex');\n    });\n  }\n  usersNew.create = create;\n}\n\n//SHOW & DELETE\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  User.get($state.params, (data) => {\n    usersShow.user = data;\n\n    usersShow.authUser = $auth.getPayload();\n    if (usersShow.authUser) {\n      usersShow.authUser = usersShow.authUser._id;\n    }\n\n    usersShow.incrementLikes = userLikes;\n    usersShow.isLoggedIn = $auth.isAuthenticated;\n    usersShow.delete = deleteUser;\n  });\n\n  function userLikes() {\n    const userIdIndex = usersShow.user.likes.indexOf(usersShow.authUser);\n\n    if (!usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.push(usersShow.authUser);\n      usersShow.user.$update();\n    } else if (usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.splice(userIdIndex, 1);\n      usersShow.user.$update();\n    }\n  }\n\n  // function userChallenges () {\n  //   usersShow.users.activeChallenges.data.push(usersShow.authUser);\n  //   usersShow.users.activeChallenges.userId.push(usersShow.authUser);\n  //   usersShow.users.$update((data) => {\n  //     console.log(data);\n  //   });\n  // }\n  //\n  // usersShow.userChallenges = userChallenges;\n\n  // usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n}\n\n//EDIT\nUsersEditController.$inject = ['User', '$state', '$auth', 'user'];\nfunction UsersEditController(User, $state, $auth, user) {\n  const usersEdit = this;\n\n  console.log(user);\n\n  usersEdit.authUser = $auth.getPayload();\n  if (usersEdit.authUser) {\n    usersEdit.authUser = usersEdit.authUser._id;\n  }\n\n  User.get({ id: usersEdit.authUser }, (data) => {\n    usersEdit.user = data;\n    console.log(usersEdit.user);\n  });\n\n\n  function update() {\n    usersEdit.user.$update((data) => {\n      $state.go('usersShow', { id: usersEdit.authUser });\n      user.account = data;\n    });\n  }\n\n  usersEdit.update = update;\n}\n"]}