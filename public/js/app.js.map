{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/challenges.js","js/models/user.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","ChallengesIndexController","Challenge","challengesIndex","all","query","ChallengesNewController","create","save","challengesNew","challenge","ChallengesShowController","deleteChallenge","challengesShow","$remove","get","params","isLoggedIn","isAuthenticated","delete","ChallengesEditController","update","challengesEdit","$update","User","$resource","id","method","angular","module","config","$inject","factory"],"mappings":"YAMA,SAASA,QAAOC,EAAgBC,GAC9BD,EACGE,MAAM,mBACLC,IAAK,cACLC,YAAa,kCACbC,WAAY,iDAEbH,MAAM,iBACLC,IAAK,kBACLC,YAAa,gCACbC,WAAY,6CAEbH,MAAM,kBACLC,IAAK,kBACLC,YAAa,iCACbC,WAAY,+CAEbH,MAAM,kBACLC,IAAK,uBACLC,YAAa,iCACbC,WAAY,+CAEbH,MAAM,YACLC,IAAK,YACLC,YAAa,2BACbC,WAAY,mCAEbH,MAAM,SACLC,IAAK,SACLC,YAAa,wBACbC,WAAY,6BAGhBJ,EAAmBK,UAAU,eAI/B,QAASC,MAAKC,GACZA,EAAcC,SAAW,SACzBD,EAAcE,UAAY,YAE1BF,EAAcG,YAAc,GC1C9B,QAASC,oBAAmBC,EAAOC,GAKjC,QAASC,KACPF,EAAMG,OAAOC,EAASC,MACnBC,KAAK,WACJL,EAAOM,GAAG,WAPhB,GAAMH,GAAWI,IAEjBJ,GAASC,QASTD,EAASF,OAASA,EAIpB,QAASO,iBAAgBT,EAAOC,GAK9B,QAASC,KACPF,EAAMU,MAAMA,EAAMC,aACfL,KAAK,WACJL,EAAOM,GAAG,qBAPhB,GAAMG,GAAQF,IAEdE,GAAMC,eASND,EAAMR,OAASA,EC1BjB,QAASU,2BAA0BC,GACjC,GAAMC,GAAkBN,IAExBM,GAAgBC,IAAMF,EAAUG,QAIlC,QAASC,yBAAwBJ,EAAWZ,GAK1C,QAASiB,KACPL,EAAUM,KAAKC,EAAcC,UAAW,WACtCpB,EAAOM,GAAG,qBANd,GAAMa,GAAgBZ,IAEtBY,GAAcC,aAQdD,EAAcF,OAASA,EAIzB,QAASI,0BAAyBT,EAAWZ,EAAQD,GAKnD,QAASuB,KACPC,EAAeH,UAAUI,QAAQ,WAC/BxB,EAAOM,GAAG,qBANd,GAAMiB,GAAiBhB,IAEvBgB,GAAeH,UAAYR,EAAUa,IAAIzB,EAAO0B,QAQhDH,EAAeI,WAAa5B,EAAM6B,gBAElCL,EAAeM,OAASP,EAI1B,QAASQ,0BAAyBlB,EAAWZ,GAK3C,QAAS+B,KACPC,EAAeZ,UAAUa,QAAQ,WAC/BjC,EAAOM,GAAG,iBAAkBN,EAAO0B,UANvC,GAAMM,GAAiBzB,IAEvByB,GAAeZ,UAAYR,EAAUa,IAAIzB,EAAO0B,QAQhDnB,KAAKwB,OAASA,ECrDhB,QAASG,MAAKC,GACZ,MAAO,IAAIA,GAAU,cAAgBC,GAAI,SACvCL,QAAUM,OAAQ,SHNtBC,QACGC,OAAO,SAAU,aAAc,YAAa,eAC5CC,OAAOvD,QACPuD,OAAO/C,MAEVR,OAAOwD,SAAW,iBAAkB,sBAqCpChD,KAAKgD,SAAW,iBC1ChBH,QAAQC,OAAO,SACZhD,WAAW,qBAAsBO,oBACjCP,WAAW,kBAAmBiB,iBAEjCV,mBAAmB2C,SAAW,QAAS,UAgBvCjC,gBAAgBiC,SAAW,QAAS,UCpBpCH,QAAQC,OAAO,SACZhD,WAAW,4BAA6BoB,2BACxCpB,WAAW,0BAA2ByB,yBACtCzB,WAAW,2BAA4B8B,0BACvC9B,WAAW,2BAA4BuC,0BAE1CnB,0BAA0B8B,SAAW,aAOrCzB,wBAAwByB,SAAW,YAAa,UAehDpB,yBAAyBoB,SAAW,YAAa,SAAU,SAiB3DX,yBAAyBW,SAAW,YAAa,UC7CjDH,QAAQC,OAAO,SACZG,QAAQ,OAAQR,MAEnBA,KAAKO,SAAW","file":"app.js","sourcesContent":["angular\n  .module('goApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('challengesIndex', {\n      url: '/challenges',\n      templateUrl: '/templates/challengesIndex.html',\n      controller: 'ChallengesIndexController as challengesIndex'\n    })\n    .state('challengesNew', {\n      url: '/challenges/new',\n      templateUrl: '/templates/challengesNew.html',\n      controller: 'ChallengesNewController as challengesNew'\n    })\n    .state('challengesShow', {\n      url: '/challenges/:id',\n      templateUrl: '/templates/challengesShow.html',\n      controller: 'ChallengesShowController as challengesShow'\n    })\n    .state('challengesEdit', {\n      url: '/challenges/:id/edit',\n      templateUrl: '/templates/challengesEdit.html',\n      controller: 'ChallengesEditController as challengesEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/challenges');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('goApp')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('challengesIndex');\n      });\n\n  }\n  login.submit = submit;\n}\n","angular.module('goApp')\n  .controller('ChallengesIndexController', ChallengesIndexController)\n  .controller('ChallengesNewController', ChallengesNewController)\n  .controller('ChallengesShowController', ChallengesShowController)\n  .controller('ChallengesEditController', ChallengesEditController);\n\nChallengesIndexController.$inject = ['Challenge'];\nfunction ChallengesIndexController(Challenge) {\n  const challengesIndex = this;\n\n  challengesIndex.all = Challenge.query();\n}\n\nChallengesNewController.$inject = ['Challenge', '$state'];\nfunction ChallengesNewController(Challenge, $state) {\n  const challengesNew = this;\n\n  challengesNew.challenge = {};\n\n  function create() {\n    Challenge.save(challengesNew.challenge, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  challengesNew.create = create;\n}\n\nChallengesShowController.$inject = ['Challenge', '$state', '$auth'];\nfunction ChallengesShowController(Challenge, $state, $auth) {\n  const challengesShow = this;\n\n  challengesShow.challenge = Challenge.get($state.params);\n\n  function deleteChallenge() {\n    challengesShow.challenge.$remove(() => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  challengesShow.isLoggedIn = $auth.isAuthenticated;\n\n  challengesShow.delete = deleteChallenge;\n}\n\nChallengesEditController.$inject = ['Challenge', '$state'];\nfunction ChallengesEditController(Challenge, $state) {\n  const challengesEdit = this;\n\n  challengesEdit.challenge = Challenge.get($state.params);\n\n  function update() {\n    challengesEdit.challenge.$update(() => {\n      $state.go('challengesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('goApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}