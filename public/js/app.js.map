{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/challenge.js","js/controllers/challenges.js","js/services/currentUser.js","js/controllers/main.js","js/controllers/profile.js","js/models/user.js","js/services/user.js","js/controllers/users.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","User","login","isLoggedIn","console","log","credentials","currentUser","getPayload","get","id","_id","data","account","Challenge","$resource","update","method","ChallengesIndexController","challengesIndex","all","query","ChallengesNewController","create","save","challengesNew","challenge","ChallengesShowController","deleteChallenge","challengesShow","$remove","challengeLike","userIdIndex","like","indexOf","authUser","includes","push","$update","splice","participate","participants","userId","userProfile","activeChallenges","Unparticipate","indexId","params","incrementLikes","isAuthenticated","delete","ChallengesEditController","challengesEdit","MainController","toggleMenu","main","menuActive","togglePopUp","ProfileController","logout","profile","currentUserId","message","self","UsersIndexController","usersIndex","UsersNewController","usersNew","UsersShowController","userLikes","usersShow","likes","deleteUser","UsersEditController","usersEdit","bio","angular","module","config","$inject","factory","service"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('goApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('challengesIndex', {\n      url: '/challenges',\n      templateUrl: '/templates/challengesIndex.html',\n      controller: 'ChallengesIndexController as challengesIndex'\n    })\n    .state('challengesNew', {\n      url: '/challenges/new',\n      templateUrl: '/templates/challengesNew.html',\n      controller: 'ChallengesNewController as challengesNew'\n    })\n    .state('challengesShow', {\n      url: '/challenges/:id',\n      templateUrl: '/templates/challengesShow.html',\n      controller: 'ChallengesShowController as challengesShow'\n    })\n    .state('challengesEdit', {\n      url: '/challenges/:id/edit',\n      templateUrl: '/templates/challengesEdit.html',\n      controller: 'ChallengesEditController as challengesEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n      // controller: 'HomeController as home'\n    })\n    .state('usersIndex', {\n      url: '/challengers',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersEdit', {\n      url: '/challengers/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('usersShow', {\n      url: '/challengers/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    });\n\n  $urlRouterProvider.otherwise('/challenges');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('goApp')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('home');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction LoginController($auth, $state, User, user) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    login.isLoggedIn = true;\n    console.log(login.isLoggedIn);\n    $auth.login(login.credentials)\n      .then(() => {\n        login.currentUser = $auth.getPayload();\n\n        if(login.currentUser) {\n          User.get({ id: login.currentUser._id }, (data) => {\n            user.account = data;\n            console.log(user.currentUser);\n          });\n        }\n        $state.go('home');\n      });\n  }\n  login.submit = submit;\n}\n","angular.module('goApp')\n  .factory('Challenge', Challenge);\n\nChallenge.$inject = ['$resource'];\nfunction Challenge($resource) {\n  return new $resource('/challenges/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('ChallengesIndexController', ChallengesIndexController)\n  .controller('ChallengesNewController', ChallengesNewController)\n  .controller('ChallengesShowController', ChallengesShowController)\n  .controller('ChallengesEditController', ChallengesEditController);\n\nChallengesIndexController.$inject = ['Challenge'];\nfunction ChallengesIndexController(Challenge) {\n  const challengesIndex = this;\n  challengesIndex.all = Challenge.query();\n  // console.log('In the challenge index controller');\n}\n\n\nChallengesNewController.$inject = ['Challenge', '$state'];\nfunction ChallengesNewController(Challenge, $state) {\n  const challengesNew = this;\n\n  challengesNew.challenge = {};\n\n  function create() {\n    Challenge.save(challengesNew.challenge, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  challengesNew.create = create;\n}\n\n//SHOW\nChallengesShowController.$inject = ['Challenge', 'User', '$state', '$auth'];\nfunction ChallengesShowController(Challenge, User, $state, $auth) {\n\n  const challengesShow = this;\n  challengesShow.authUser = $auth.getPayload();\n  if (challengesShow.authUser) {\n    challengesShow.authUser = challengesShow.authUser._id;\n    User.get({id: challengesShow.authUser}, (data)=> {\n      challengesShow.userProfile = data;\n    });\n  }\n\n  challengesShow.challenge = Challenge.get($state.params);\n  function deleteChallenge() {\n    challengesShow.challenge.$remove(() => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  function challengeLike() {\n    const userIdIndex = challengesShow.challenge.like.indexOf(challengesShow.authUser);\n\n    if (!challengesShow.challenge.like.includes(challengesShow.authUser) && !!challengesShow.authUser) {\n      challengesShow.challenge.like.push(challengesShow.authUser);\n      challengesShow.challenge.$update();\n    } else if (challengesShow.challenge.like.includes(challengesShow.authUser) && !!challengesShow.authUser) {\n      challengesShow.challenge.like.splice(userIdIndex, 1);\n      challengesShow.challenge.$update();\n    }\n  }\n\n  function participate() {\n    // Add User Id to challenge model\n    challengesShow.challenge.participants.data.push(challengesShow.authUser);\n    challengesShow.challenge.participants.userId.push(challengesShow.authUser);\n\n    challengesShow.challenge.$update((data) => {\n      console.log(data);\n      console.log(challengesShow.challenge.participants.userId);\n    });\n\n    // Add Challenge Id to user Model\n    challengesShow.userProfile.activeChallenges.push(challengesShow.challenge._id);\n\n    // Update both\n    challengesShow.challenge.$update();\n    challengesShow.userProfile.$update();\n\n  }\n\n  function Unparticipate() {\n    const indexId = challengesShow.challenge.participants.userId.indexOf(challengesShow.authUser);\n    challengesShow.challenge.participants.userId.splice(indexId, 1);\n    console.log(challengesShow.challenge.participants.userId);\n  }\n\n  challengesShow.Unparticipate = Unparticipate;\n  challengesShow.participate = participate;\n  challengesShow.incrementLikes = challengeLike;\n  challengesShow.isLoggedIn = $auth.isAuthenticated;\n  challengesShow.delete = deleteChallenge;\n}\n\nChallengesEditController.$inject = ['Challenge', '$state'];\nfunction ChallengesEditController(Challenge, $state) {\n  const challengesEdit = this;\n\n  challengesEdit.challenge = Challenge.get($state.params);\n\n  function update() {\n    challengesEdit.challenge.$update(() => {\n      $state.go('challengesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('goApp')\n  .service('currentUser', currentUser);\n\ncurrentUser.$inject = ['User', '$auth'];\nfunction currentUser (User, $auth) {\n  var user = this;\n\n  // const isLoggedIn = $auth.isAuthenticated;\n  const currentUser = $auth.getPayload();\n\n  if(currentUser) {\n    User.get({ id: currentUser._id }, (data) => {\n      user.account = data;\n    });\n  }\n}\n","angular.module('goApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth'];\nfunction MainController($auth) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.currentUser = $auth.getPayload();\n\n  function toggleMenu() {\n    console.log('in toggle menu');\n    main.menuActive = !main.menuActive;\n    console.log(main.menuActive);\n  }\n  main.toggleMenu = toggleMenu;\n\n  function togglePopUp() {\n    console.log('In toggle pop up');\n    main.popUpActive = !main.popUpActive;\n  }\n\n  main.togglePopUp = !main.togglePopUp;\n\n\n\n\n\n\n\n  // main.getProfile = getProfile;\n\n  // const protectedStates = ['playersEdit', 'playersNew'];\n  //\n  // function secureState(e, toState) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //   }\n  // }\n\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n}\n","angular.module('goApp')\n  .controller('ProfileController', ProfileController);\n\nProfileController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction ProfileController($auth, $state, User, user) {\n  const profile = this;\n\n  profile.isLoggedIn = $auth.isAuthenticated;\n  if ($auth.getPayload()){\n    profile.currentUserId = $auth.getPayload()._id;\n  }\n  profile.currentUser = user;\n\n  if(profile.isLoggedIn()) {\n    User.get({ id: profile.currentUserId }, (data) => {\n      user.account = data;\n    });\n  }\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        profile.account = null;\n        $state.go('home');\n      });\n  }\n  profile.logout = logout;\n\n  profile.message = null;\n}\n","angular\n  .module('goApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\n\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .service('user', user);\n\nfunction user() {\n  var self = this;\n\n  self.account = {};\n}\n","angular.module('goApp')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\n//INDEX\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n//CREATE\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('userIndex');\n    });\n  }\n  usersNew.create = create;\n}\n\n//SHOW & DELETE\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  User.get($state.params, (data) => {\n    usersShow.user = data;\n\n    usersShow.authUser = $auth.getPayload();\n    if (usersShow.authUser) {\n      usersShow.authUser = usersShow.authUser._id;\n    }\n\n    usersShow.incrementLikes = userLikes;\n    usersShow.isLoggedIn = $auth.isAuthenticated;\n    usersShow.delete = deleteUser;\n  });\n\n  function userLikes() {\n    const userIdIndex = usersShow.user.likes.indexOf(usersShow.authUser);\n\n    if (!usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.push(usersShow.authUser);\n      usersShow.user.$update();\n    } else if (usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.splice(userIdIndex, 1);\n      usersShow.user.$update();\n    }\n  }\n\n  // function userChallenges () {\n  //   usersShow.users.activeChallenges.data.push(usersShow.authUser);\n  //   usersShow.users.activeChallenges.userId.push(usersShow.authUser);\n  //   usersShow.users.$update((data) => {\n  //     console.log(data);\n  //   });\n  // }\n  //\n  // usersShow.userChallenges = userChallenges;\n\n  // usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n}\n\n//EDIT\nUsersEditController.$inject = ['User', '$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.authUser = $auth.getPayload();\n  if (usersEdit.authUser) {\n    usersEdit.authUser = usersEdit.authUser._id;\n  }\n\n  User.get({ id: usersEdit.authUser }, (data) => {\n    usersEdit.user = data;\n\n    console.log(usersEdit.user);\n  });\n\n\n  function update() {\n    usersEdit.user.$update((data) => {\n      console.log(data.bio);\n      $state.go('usersShow', { id: usersEdit.authUser });\n    });\n  }\n\n  usersEdit.update = update;\n}\n"]}