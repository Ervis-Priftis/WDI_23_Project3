{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/challenge.js","js/controllers/challenges.js","js/controllers/main.js","js/controllers/profile.js","js/models/user.js","js/controllers/user.js","js/services/user.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","User","login","isLoggedIn","console","log","credentials","currentUser","getPayload","get","id","_id","data","account","Challenge","$resource","update","method","ChallengesIndexController","challengesIndex","all","query","ChallengesNewController","create","save","challengesNew","challenge","ChallengesShowController","deleteChallenge","challengesShow","$remove","challengeLike","like","$update","participate","participants","push","authUser","userId","params","incrementLikes","isAuthenticated","delete","ChallengesEditController","challengesEdit","MainController","toggleMenu","main","menuActive","ProfileController","logout","profile","currentUserId","message","UsersIndexController","usersIndex","UsersNewController","usersNew","UsersShowController","userLikes","usersShow","likes","includes","deleteUser","UsersEditController","usersEdit","bio","self","angular","module","config","$inject","factory","service"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('goApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('challengesIndex', {\n      url: '/challenges',\n      templateUrl: '/templates/challengesIndex.html',\n      controller: 'ChallengesIndexController as challengesIndex'\n    })\n    .state('challengesNew', {\n      url: '/challenges/new',\n      templateUrl: '/templates/challengesNew.html',\n      controller: 'ChallengesNewController as challengesNew'\n    })\n    .state('challengesShow', {\n      url: '/challenges/:id',\n      templateUrl: '/templates/challengesShow.html',\n      controller: 'ChallengesShowController as challengesShow'\n    })\n    .state('challengesEdit', {\n      url: '/challenges/:id/edit',\n      templateUrl: '/templates/challengesEdit.html',\n      controller: 'ChallengesEditController as challengesEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n      // controller: 'HomeController as home'\n    })\n    .state('usersIndex', {\n      url: '/challengers',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersEdit', {\n      url: '/challengers/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('usersShow', {\n      url: '/challengers/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    });\n\n  $urlRouterProvider.otherwise('/challenges');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('goApp')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('home');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction LoginController($auth, $state, User, user) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    login.isLoggedIn = true;\n    console.log(login.isLoggedIn);\n    $auth.login(login.credentials)\n      .then(() => {\n        login.currentUser = $auth.getPayload();\n\n        if(login.currentUser) {\n          User.get({ id: login.currentUser._id }, (data) => {\n            user.account = data;\n            console.log(user.currentUser);\n          });\n        }\n        $state.go('home');\n      });\n  }\n  login.submit = submit;\n}\n","angular.module('goApp')\n  .factory('Challenge', Challenge);\n\nChallenge.$inject = ['$resource'];\nfunction Challenge($resource) {\n  return new $resource('/challenges/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('ChallengesIndexController', ChallengesIndexController)\n  .controller('ChallengesNewController', ChallengesNewController)\n  .controller('ChallengesShowController', ChallengesShowController)\n  .controller('ChallengesEditController', ChallengesEditController);\n\nChallengesIndexController.$inject = ['Challenge'];\nfunction ChallengesIndexController(Challenge) {\n  const challengesIndex = this;\n\n  challengesIndex.all = Challenge.query();\n}\n\n\nChallengesNewController.$inject = ['Challenge', '$state'];\nfunction ChallengesNewController(Challenge, $state) {\n  const challengesNew = this;\n\n  challengesNew.challenge = {};\n\n  function create() {\n    Challenge.save(challengesNew.challenge, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  challengesNew.create = create;\n}\n\n//SHOW\nChallengesShowController.$inject = ['Challenge', '$state', '$auth'];\nfunction ChallengesShowController(Challenge, $state, $auth) {\n\n  const challengesShow = this;\n  challengesShow.authUser = $auth.getPayload();\n  if (challengesShow.authUser) {\n    challengesShow.authUser = challengesShow.authUser._id;\n  }\n\n  challengesShow.challenge = Challenge.get($state.params);\n  console.log(challengesShow.challenge);\n  function deleteChallenge() {\n    challengesShow.challenge.$remove(() => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  function challengeLike() {\n    challengesShow.challenge.like ++;\n    challengesShow.challenge.$update();\n  }\n\n  function participate() {\n    challengesShow.challenge.participants.data.push(challengesShow.authUser);\n    challengesShow.challenge.participants.userId.push(challengesShow.authUser);\n    challengesShow.challenge.$update((data) => {\n      console.log(data);\n    });\n  }\n\n  challengesShow.participate = participate;\n  challengesShow.incrementLikes = challengeLike;\n  challengesShow.isLoggedIn = $auth.isAuthenticated;\n  challengesShow.delete = deleteChallenge;\n}\n\nChallengesEditController.$inject = ['Challenge', '$state'];\nfunction ChallengesEditController(Challenge, $state) {\n  const challengesEdit = this;\n\n  challengesEdit.challenge = Challenge.get($state.params);\n\n  function update() {\n    challengesEdit.challenge.$update(() => {\n      $state.go('challengesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('goApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth'];\nfunction MainController($auth) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.currentUser = $auth.getPayload();\n\n  function toggleMenu() {\n    console.log('in toggle menu');\n    main.menuActive = !main.menuActive;\n    console.log(main.menuActive);\n  }\n  main.toggleMenu = toggleMenu;\n\n\n\n\n\n\n\n\n\n\n  // main.getProfile = getProfile;\n\n  // const protectedStates = ['playersEdit', 'playersNew'];\n  //\n  // function secureState(e, toState) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //   }\n  // }\n\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n}\n","angular.module('goApp')\n  .controller('ProfileController', ProfileController);\n\nProfileController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction ProfileController($auth, $state, User, user) {\n  const profile = this;\n\n  profile.isLoggedIn = $auth.isAuthenticated;\n  profile.currentUserId = $auth.getPayload()._id;\n\n  profile.currentUser = user;\n\n  if(profile.isLoggedIn()) {\n    User.get({ id: profile.currentUserId }, (data) => {\n      user.account = data;\n    });\n  }\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        profile.account = null;\n        $state.go('home');\n      });\n  }\n  profile.logout = logout;\n\n  profile.message = null;\n}\n","angular\n  .module('goApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\n\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\n//INDEX\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n//CREATE\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('userIndex');\n    });\n  }\n  usersNew.create = create;\n}\n\n//SHOW & DELETE\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  User.get($state.params, (data) => {\n    usersShow.user = data;\n\n    usersShow.authUser = $auth.getPayload();\n    if (usersShow.authUser) {\n      usersShow.authUser = usersShow.authUser._id;\n    }\n\n    usersShow.incrementLikes = userLikes;\n    usersShow.isLoggedIn = $auth.isAuthenticated;\n    usersShow.delete = deleteUser;\n  });\n\n  function userLikes() {\n    if (!usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.push(usersShow.authUser);\n      usersShow.user.$update();\n    }\n  }\n\n  // function userChallenges () {\n  //   usersShow.users.activeChallenges.data.push(usersShow.authUser);\n  //   usersShow.users.activeChallenges.userId.push(usersShow.authUser);\n  //   usersShow.users.$update((data) => {\n  //     console.log(data);\n  //   });\n  // }\n  //\n  // usersShow.userChallenges = userChallenges;\n\n  // usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n}\n\n//EDIT\nUsersEditController.$inject = ['User', '$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.authUser = $auth.getPayload();\n  if (usersEdit.authUser) {\n    usersEdit.authUser = usersEdit.authUser._id;\n  }\n\n  User.get({ id: usersEdit.authUser }, (data) => {\n    usersEdit.user = data;\n\n    console.log(usersEdit.user);\n  });\n\n\n  function update() {\n    usersEdit.user.$update((data) => {\n      console.log(data.bio);\n      $state.go('usersShow', { id: usersEdit.authUser });\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular.module('goApp')\n  .service('user', user);\n\nfunction user() {\n  var self = this;\n\n  self.account = {};\n}\n"]}