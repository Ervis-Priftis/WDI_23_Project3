{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/challenge.js","js/controllers/challenges.js","js/controllers/main.js","js/controllers/user.js","js/models/user.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Challenge","$resource","id","update","method","ChallengesIndexController","challengesIndex","all","query","ChallengesNewController","create","save","challengesNew","challenge","ChallengesShowController","deleteChallenge","challengesShow","$remove","challengeLike","like","$update","get","params","incrementLikes","isLoggedIn","isAuthenticated","delete","ChallengesEditController","challengesEdit","MainController","logout","main","message","UsersIndexController","User","usersIndex","UsersNewController","usersNew","UsersShowController","userLikes","usersShow","likes","includes","authUser","data","push","totalLikes","length","deleteUser","getPayload","_id","console","log","UsersEditController","usersEdit","angular","module","config","$inject","factory"],"mappings":"YAMA,SAASA,QAAOC,EAAgBC,GAC9BD,EACGE,MAAM,mBACLC,IAAK,cACLC,YAAa,kCACbC,WAAY,iDAEbH,MAAM,iBACLC,IAAK,kBACLC,YAAa,gCACbC,WAAY,6CAEbH,MAAM,kBACLC,IAAK,kBACLC,YAAa,iCACbC,WAAY,+CAEbH,MAAM,kBACLC,IAAK,uBACLC,YAAa,iCACbC,WAAY,+CAEbH,MAAM,YACLC,IAAK,YACLC,YAAa,2BACbC,WAAY,mCAEbH,MAAM,SACLC,IAAK,SACLC,YAAa,wBACbC,WAAY,6BAEbH,MAAM,QACLC,IAAK,IACLC,YAAa,yBAGdF,MAAM,cACLC,IAAK,eACLC,YAAa,6BACbC,WAAY,uCAEbH,MAAM,aACLC,IAAK,uBACLC,YAAa,4BACbC,WAAY,qCAEbH,MAAM,aACLC,IAAK,mBACLC,YAAa,4BACbC,WAAY,qCAGhBJ,EAAmBK,UAAU,eAI/B,QAASC,MAAKC,GACZA,EAAcC,SAAW,SACzBD,EAAcE,UAAY,YAE1BF,EAAcG,YAAc,GC9D9B,QAASC,oBAAmBC,EAAOC,GAKjC,QAASC,KACPF,EAAMG,OAAOC,EAASC,MACnBC,KAAK,WACJL,EAAOM,GAAG,WAPhB,GAAMH,GAAWI,IAEjBJ,GAASC,QASTD,EAASF,OAASA,EAIpB,QAASO,iBAAgBT,EAAOC,GAK9B,QAASC,KACPF,EAAMU,MAAMA,EAAMC,aACfL,KAAK,WACJL,EAAOM,GAAG,UAPhB,GAAMG,GAAQF,IAEdE,GAAMC,eASND,EAAMR,OAASA,EC7BjB,QAASU,WAAUC,GACjB,MAAO,IAAIA,GAAU,mBAAqBC,GAAI,SAC5CC,QAAUC,OAAQ,SCCtB,QAASC,2BAA0BL,GACjC,GAAMM,GAAkBV,IAExBU,GAAgBC,IAAMP,EAAUQ,QAKlC,QAASC,yBAAwBT,EAAWX,GAK1C,QAASqB,KACPV,EAAUW,KAAKC,EAAcC,UAAW,WACtCxB,EAAOM,GAAG,qBANd,GAAMiB,GAAgBhB,IAEtBgB,GAAcC,aAQdD,EAAcF,OAASA,EAKzB,QAASI,0BAAyBd,EAAWX,EAAQD,GAInD,QAAS2B,KACPC,EAAeH,UAAUI,QAAQ,WAC/B5B,EAAOM,GAAG,qBAId,QAASuB,KACPF,EAAeH,UAAUM,OACzBH,EAAeH,UAAUO,UAX3B,GAAMJ,GAAiBpB,IACvBoB,GAAeH,UAAYb,EAAUqB,IAAIhC,EAAOiC,QAahDN,EAAeO,eAAiBL,EAChCF,EAAeQ,WAAapC,EAAMqC,gBAClCT,EAAeU,OAASX,EAI1B,QAASY,0BAAyB3B,EAAWX,GAK3C,QAASc,KACPyB,EAAef,UAAUO,QAAQ,WAC/B/B,EAAOM,GAAG,iBAAkBN,EAAOiC,UANvC,GAAMM,GAAiBhC,IAEvBgC,GAAef,UAAYb,EAAUqB,IAAIhC,EAAOiC,QAQhD1B,KAAKO,OAASA,EC3DhB,QAAS0B,gBAAezC,EAAOC,GAK7B,QAASyC,KACP1C,EAAM0C,SACHpC,KAAK,WACJL,EAAOM,GAAG,UAPhB,GAAMoC,GAAOnC,IAEbmC,GAAKP,WAAapC,EAAMqC,gBAQxBM,EAAKD,OAASA,EAEdC,EAAKC,QAAU,KCRjB,QAASC,sBAAqBC,GAC5B,GAAMC,GAAavC,IACnBuC,GAAW5B,IAAM2B,EAAK1B,QAKxB,QAAS4B,oBAAmBF,EAAM7C,GAIhC,QAASqB,KACPwB,EAAKvB,KAAK0B,EAAS5C,KAAM,WACvBJ,EAAOM,GAAG,eALd,GAAM0C,GAAWzC,IACjByC,GAAS5C,QAOT4C,EAAS3B,OAASA,EAKpB,QAAS4B,qBAAoBJ,EAAM7C,EAAQD,GAazC,QAASmD,KACFC,EAAU/C,KAAKgD,MAAMC,SAASF,EAAUG,YAC3CH,EAAU/C,KAAOyC,EAAKb,IAAIhC,EAAOiC,OAAQ,SAACsB,GACxCA,EAAKH,MAAMI,KAAKL,EAAUG,UAC1BC,EAAKE,WAAaF,EAAKH,MAAMM,SAE/BP,EAAU/C,KAAK2B,WAInB,QAAS4B,KACPR,EAAU/C,KAAKwB,QAAQ,WACrB5B,EAAOM,GAAG,gBAxBd,GAAM6C,GAAY5C,IAElB4C,GAAU/C,KAAOyC,EAAKb,IAAIhC,EAAOiC,OAAQ,SAACsB,GACxCA,EAAKH,MAAMI,KAAKL,EAAUG,UAC1BC,EAAKE,WAAaF,EAAKH,MAAMM,SAE/BP,EAAUG,SAAWvD,EAAM6D,aAAaC,IAIxCC,QAAQC,IAAIZ,EAAU/C,MAkBtB+C,EAAUjB,eAAiBgB,EAC3BC,EAAUhB,WAAapC,EAAMqC,gBAC7Be,EAAUd,OAASsB,EAKrB,QAASK,qBAAoBnB,EAAM7C,GAKjC,QAASc,KACPmD,EAAU7D,KAAK2B,QAAQ,WACrB/B,EAAOM,GAAG,YAAaN,EAAOiC,UANlC,GAAMgC,GAAY1D,IAElB0D,GAAU7D,KAAOyC,EAAKb,IAAIhC,EAAOiC,QAQjC1B,KAAKO,OAASA,ECzEhB,QAAS+B,MAAKjC,GACZ,MAAO,IAAIA,GAAU,cAAgBC,GAAI,SACvCC,QAAUC,OAAQ,SNNtBmD,QACGC,OAAO,SAAU,aAAc,YAAa,eAC5CC,OAAOnF,QACPmF,OAAO3E,MAEVR,OAAOoF,SAAW,iBAAkB,sBAyDpC5E,KAAK4E,SAAW,iBC9DhBH,QAAQC,OAAO,SACZ5E,WAAW,qBAAsBO,oBACjCP,WAAW,kBAAmBiB,iBAEjCV,mBAAmBuE,SAAW,QAAS,UAgBvC7D,gBAAgB6D,SAAW,QAAS,UCpBpCH,QAAQC,OAAO,SACZG,QAAQ,YAAa3D,WAExBA,UAAU0D,SAAW,aCHrBH,QAAQC,OAAO,SACZ5E,WAAW,4BAA6ByB,2BACxCzB,WAAW,0BAA2B6B,yBACtC7B,WAAW,2BAA4BkC,0BACvClC,WAAW,2BAA4B+C,0BAE1CtB,0BAA0BqD,SAAW,aAQrCjD,wBAAwBiD,SAAW,YAAa,UAgBhD5C,yBAAyB4C,SAAW,YAAa,SAAU,SAqB3D/B,yBAAyB+B,SAAW,YAAa,UCnDjDH,QAAQC,OAAO,SACZ5E,WAAW,iBAAkBiD,gBAEhCA,eAAe6B,SAAW,QAAS,UCHnCH,QAAQC,OAAO,SACZ5E,WAAW,uBAAwBqD,sBACnCrD,WAAW,qBAAsBwD,oBACjCxD,WAAW,sBAAuB0D,qBAClC1D,WAAW,sBAAuByE,qBAIrCpB,qBAAqByB,SAAW,QAOhCtB,mBAAmBsB,SAAW,OAAQ,UActCpB,oBAAoBoB,SAAW,OAAQ,SAAU,SAoCjDL,oBAAoBK,SAAW,OAAQ,UCjEvCH,QAAQC,OAAO,SACZG,QAAQ,OAAQzB,MAEnBA,KAAKwB,SAAW","file":"app.js","sourcesContent":["angular\n  .module('goApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('challengesIndex', {\n      url: '/challenges',\n      templateUrl: '/templates/challengesIndex.html',\n      controller: 'ChallengesIndexController as challengesIndex'\n    })\n    .state('challengesNew', {\n      url: '/challenges/new',\n      templateUrl: '/templates/challengesNew.html',\n      controller: 'ChallengesNewController as challengesNew'\n    })\n    .state('challengesShow', {\n      url: '/challenges/:id',\n      templateUrl: '/templates/challengesShow.html',\n      controller: 'ChallengesShowController as challengesShow'\n    })\n    .state('challengesEdit', {\n      url: '/challenges/:id/edit',\n      templateUrl: '/templates/challengesEdit.html',\n      controller: 'ChallengesEditController as challengesEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n      // controller: 'HomeController as home'\n    })\n    .state('usersIndex', {\n      url: '/challengers',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersEdit', {\n      url: '/challenger/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('usersShow', {\n      url: '/challengers/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    });\n\n  $urlRouterProvider.otherwise('/challenges');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('goApp')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('home');\n      });\n\n  }\n  login.submit = submit;\n}\n","angular.module('goApp')\n  .factory('Challenge', Challenge);\n\nChallenge.$inject = ['$resource'];\nfunction Challenge($resource) {\n  return new $resource('/challenges/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('ChallengesIndexController', ChallengesIndexController)\n  .controller('ChallengesNewController', ChallengesNewController)\n  .controller('ChallengesShowController', ChallengesShowController)\n  .controller('ChallengesEditController', ChallengesEditController);\n\nChallengesIndexController.$inject = ['Challenge'];\nfunction ChallengesIndexController(Challenge) {\n  const challengesIndex = this;\n\n  challengesIndex.all = Challenge.query();\n}\n\n\nChallengesNewController.$inject = ['Challenge', '$state'];\nfunction ChallengesNewController(Challenge, $state) {\n  const challengesNew = this;\n\n  challengesNew.challenge = {};\n\n  function create() {\n    Challenge.save(challengesNew.challenge, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  challengesNew.create = create;\n}\n\n//SHOW\nChallengesShowController.$inject = ['Challenge', '$state', '$auth'];\nfunction ChallengesShowController(Challenge, $state, $auth) {\n  const challengesShow = this;\n  challengesShow.challenge = Challenge.get($state.params);\n\n  function deleteChallenge() {\n    challengesShow.challenge.$remove(() => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  function challengeLike() {\n    challengesShow.challenge.like ++;\n    challengesShow.challenge.$update();\n  }\n\n  challengesShow.incrementLikes = challengeLike;\n  challengesShow.isLoggedIn = $auth.isAuthenticated;\n  challengesShow.delete = deleteChallenge;\n}\n\nChallengesEditController.$inject = ['Challenge', '$state'];\nfunction ChallengesEditController(Challenge, $state) {\n  const challengesEdit = this;\n\n  challengesEdit.challenge = Challenge.get($state.params);\n\n  function update() {\n    challengesEdit.challenge.$update(() => {\n      $state.go('challengesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('goApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state'];\nfunction MainController($auth, $state) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('home');\n      });\n  }\n  main.logout = logout;\n\n  main.message = null;\n  // const protectedStates = ['playersEdit', 'playersNew'];\n  //\n  // function secureState(e, toState) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //   }\n  // }\n\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n}\n","angular.module('goApp')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\n//INDEX\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n//CREATE\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('userIndex');\n    });\n  }\n  usersNew.create = create;\n}\n\n//SHOW & DELETE\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params, (data) => {\n    data.likes.push(usersShow.authUser);\n    data.totalLikes = data.likes.length;\n  });\n  usersShow.authUser = $auth.getPayload()._id;\n\n  // usersShow.user.totalLikes = usersShow.user.likes.length();\n\n  console.log(usersShow.user);\n\n  function userLikes() {\n    if (!usersShow.user.likes.includes(usersShow.authUser)) {\n      usersShow.user = User.get($state.params, (data) => {\n        data.likes.push(usersShow.authUser);\n        data.totalLikes = data.likes.length;\n      });\n      usersShow.user.$update();\n    }\n  }\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.incrementLikes = userLikes;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n  usersShow.delete = deleteUser;\n}\n\n//EDIT\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('goApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}