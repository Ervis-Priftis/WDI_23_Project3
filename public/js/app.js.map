{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/challenge.js","js/controllers/challenges.js","js/services/currentUser.js","js/directives/googleMap.js","js/controllers/main.js","js/controllers/profile.js","js/controllers/stories.js","js/models/story.js","js/models/user.js","js/services/user.js","js/controllers/users.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","ConfirmController","$http","method","params","confirmationCode","LoginController","User","login","isLoggedIn","console","log","credentials","currentUser","getPayload","get","id","_id","data","account","Challenge","$resource","update","ChallengesIndexController","challengesIndex","all","query","ChallengesNewController","create","save","challengesNew","challenge","ChallengesShowController","deleteChallenge","challengesShow","$remove","challengeLike","userIdIndex","like","indexOf","authUser","includes","push","$update","splice","participate","participants","userProfile","activeChallenges","Unparticipate","indexId","findIndex","participant","togglePopUp","popUpActive","addComment","comments","comment","isSubscribed","filter","length","$promise","incrementLikes","isAuthenticated","ChallengesEditController","challengesEdit","googleplace","$window","restrict","require","link","scope","element","attrs","model","options","types","componentRestrictions","autocomplete","google","maps","places","Autocomplete","addListener","res","status","$setViewValue","val","googleMap","replace","template","$watch","map","Map","center","location","zoom","scrollwheel","Marker","position","animation","Animation","DROP","MainController","toggleMenu","main","menuActive","ProfileController","logout","profile","currentUserId","message","StoriesIndexController","Story","storiesIndex","StoriesNewController","storiesNew","story","StoriesShowController","deleteStory","storiesShow","authStory","delete","StoriesEditController","storiesEdit","bio","self","UsersIndexController","usersIndex","UsersNewController","usersNew","UsersShowController","userLikes","usersShow","likes","deleteUser","UsersEditController","usersEdit","angular","module","config","$inject","factory","service","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('goApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('challengesIndex', {\n      url: '/challenges',\n      templateUrl: '/templates/challengesIndex.html',\n      controller: 'ChallengesIndexController as challengesIndex'\n    })\n    .state('challengesNew', {\n      url: '/challenges/new',\n      templateUrl: '/templates/challengesNew.html',\n      controller: 'ChallengesNewController as challengesNew'\n    })\n    .state('challengesShow', {\n      url: '/challenges/:id',\n      templateUrl: '/templates/challengesShow.html',\n      controller: 'ChallengesShowController as challengesShow'\n    })\n    .state('challengesEdit', {\n      url: '/challenges/:id/edit',\n      templateUrl: '/templates/challengesEdit.html',\n      controller: 'ChallengesEditController as challengesEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('registerInterim', {\n      url: '/registerInterim',\n      templateUrl: '/templates/registerInterim.html'\n    })\n    .state('confirm', {\n      url: '/confirm/:confirmationCode',\n      templateUrl: '/templates/confirm.html',\n      controller: 'ConfirmController as confirm'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n      // controller: 'HomeController as home'\n    })\n    .state('usersIndex', {\n      url: '/challengers',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersEdit', {\n      url: '/challengers/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('usersShow', {\n      url: '/challengers/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('storiesIndex', {\n      url: '/stories',\n      templateUrl: '/templates/storyIndex.html',\n      controller: 'StoriesIndexController as storiesIndex'\n    })\n    .state('storysEdit', {\n      url: '/stories/:id/edit',\n      templateUrl: '/templates/storyEdit.html',\n      controller: 'StoriesEditController as storiesEdit'\n    })\n    .state('storiesShow', {\n      url: '/stories/:id',\n      templateUrl: '/templates/storyShow.html',\n      controller: 'StoriesShowController as storiesShow'\n    });\n\n  $urlRouterProvider.otherwise('/challenges');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('goApp')\n.controller('RegisterController', RegisterController)\n.controller('ConfirmController', ConfirmController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('registerInterim');\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nConfirmController.$inject = ['$http', '$state'];\nfunction ConfirmController($http, $state) {\n  $http({\n    method: 'POST',\n    url: `/confirm/${$state.params.confirmationCode}`\n  });\n}\n\n\nLoginController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction LoginController($auth, $state, User, user) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    login.isLoggedIn = true;\n    console.log(login.isLoggedIn);\n    $auth.login(login.credentials)\n    .then(() => {\n      login.currentUser = $auth.getPayload();\n\n      if(login.currentUser) {\n        User.get({ id: login.currentUser._id }, (data) => {\n          user.account = data;\n          console.log(user.currentUser);\n        });\n      }\n      $state.go('home');\n    });\n  }\n  login.submit = submit;\n}\n","angular.module('goApp')\n  .factory('Challenge', Challenge);\n\nChallenge.$inject = ['$resource'];\nfunction Challenge($resource) {\n  return new $resource('/challenges/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('ChallengesIndexController', ChallengesIndexController)\n  .controller('ChallengesNewController', ChallengesNewController)\n  .controller('ChallengesShowController', ChallengesShowController)\n  .controller('ChallengesEditController', ChallengesEditController);\n\nChallengesIndexController.$inject = ['Challenge'];\nfunction ChallengesIndexController(Challenge) {\n  const challengesIndex = this;\n  challengesIndex.all = Challenge.query();\n  // console.log('In the challenge index controller');\n}\n\n\nChallengesNewController.$inject = ['Challenge', '$state'];\nfunction ChallengesNewController(Challenge, $state) {\n  const challengesNew = this;\n\n  challengesNew.challenge = {};\n\n  function create() {\n    Challenge.save(challengesNew.challenge, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  challengesNew.create = create;\n}\n\n//SHOW\nChallengesShowController.$inject = ['Challenge', 'User', '$state', '$auth'];\nfunction ChallengesShowController(Challenge, User, $state, $auth) {\n\n  const challengesShow = this;\n  challengesShow.authUser = $auth.getPayload();\n  if (challengesShow.authUser) {\n    User.get({ id: challengesShow.authUser._id }, (data)=> {\n      challengesShow.userProfile = data;\n    });\n  }\n\n\n  Challenge.get($state.params).$promise.then((challenge) => {\n    challengesShow.challenge = challenge;\n  });\n\n  function deleteChallenge() {\n    challengesShow.challenge.$remove(() => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  function challengeLike() {\n    const userIdIndex = challengesShow.challenge.like.indexOf(challengesShow.authUser);\n\n    if (!challengesShow.challenge.like.includes(challengesShow.authUser) && !!challengesShow.authUser) {\n      challengesShow.challenge.like.push(challengesShow.authUser);\n      challengesShow.challenge.$update();\n    } else if (challengesShow.challenge.like.includes(challengesShow.authUser) && !!challengesShow.authUser) {\n      challengesShow.challenge.like.splice(userIdIndex, 1);\n      challengesShow.challenge.$update();\n    }\n  }\n\n  function participate() {\n    // Add User Id to challenge model\n\n    console.log(challengesShow.challenge.participants);\n    challengesShow.challenge.participants.push(challengesShow.authUser);\n\n    // challengesShow.challenge.$update((data) => {\n    //   console.log(data);\n    //   // console.log(challengesShow.challenge.participants.userId);\n    // });\n\n    // Add Challenge Id to user Model\n    challengesShow.userProfile.activeChallenges.push(challengesShow.challenge._id);\n\n    // Update both\n    challengesShow.challenge.$update();\n    challengesShow.userProfile.$update();\n\n  }\n\n  function Unparticipate() {\n    const indexId = challengesShow.challenge.participants.findIndex((participant) => {\n      return challengesShow.authUser._id === participant._id;\n    });\n    challengesShow.challenge.participants.splice(indexId, 1);\n    challengesShow.challenge.$update();\n  }\n\n  function togglePopUp() {\n    console.log('In toggle pop up');\n    challengesShow.popUpActive = !challengesShow.popUpActive;\n  }\n\n  function addComment(){\n    challengesShow.challenge.comments.push(challengesShow.comment);\n    challengesShow.challenge.$update(() => {\n      challengesShow.comment = '';\n    });\n  }\n\n  function isSubscribed() {\n    if(challengesShow.challenge) {\n      return challengesShow.challenge.participants.filter((participant) => {\n        return challengesShow.authUser._id === participant._id;\n      }).length > 0;\n    }\n  }\n\n  challengesShow.isSubscribed = isSubscribed;\n  challengesShow.addComment = addComment;\n  challengesShow.togglePopUp = togglePopUp;\n  challengesShow.Unparticipate = Unparticipate;\n  challengesShow.participate = participate;\n  challengesShow.incrementLikes = challengeLike;\n  challengesShow.isLoggedIn = $auth.isAuthenticated;\n  challengesShow.deleteChallenge = deleteChallenge;\n}\n\nChallengesEditController.$inject = ['Challenge', '$state'];\nfunction ChallengesEditController(Challenge, $state) {\n  const challengesEdit = this;\n\n  challengesEdit.challenge = Challenge.get($state.params);\n\n  function update() {\n    challengesEdit.challenge.$update(() => {\n      $state.go('challengesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('goApp')\n  .service('currentUser', currentUser);\n\ncurrentUser.$inject = ['User', '$auth'];\nfunction currentUser (User, $auth) {\n  var user = this;\n\n  // const isLoggedIn = $auth.isAuthenticated;\n  const currentUser = $auth.getPayload();\n\n  if(currentUser) {\n    User.get({ id: currentUser._id }, (data) => {\n      user.account = data;\n    });\n  }\n}\n","angular.module('goApp')\n  .directive('googleMap', googleMap)\n  .directive('googleplace', googleplace);\n\n\n\n// let geocoder = new google.maps.Geocoder();\n// geocoder.geocode( { 'address': $scope.textfield }, function(results, status) {\n//   if(status === google.maps.GeocoderStatus.OK && results.length > 0) {\n//     let location = results[0].geometry.location;\n//     $scope.myMap.panTo(location);\n//   }\n// });\ngoogleplace.$inject = ['$window'];\nfunction googleplace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function(scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: {}\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', (res, status) => {\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n\ngoogleMap.$inject = ['$window', 'Challenge'];\nfunction googleMap($window, Challenge) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\">Google Map HERE</div>',\n    scope: {\n      challenge: '='\n    },\n    link: function(scope, element) {\n      scope.$watch('challenge', () => {\n        if(scope.challenge) {\n\n          const map = new $window.google.maps.Map(element[0], {\n            center: scope.challenge.location,\n            zoom: 6,\n            scrollwheel: false\n          });\n\n          new $window.google.maps.Marker({\n            position: scope.challenge.location,\n            map: map,\n            animation: $window.google.maps.Animation.DROP\n          });\n        }\n      });\n\n    }\n  };\n}\n","angular.module('goApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth'];\nfunction MainController($auth) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.currentUser = $auth.getPayload();\n\n  function toggleMenu() {\n    console.log('in toggle menu');\n    main.menuActive = !main.menuActive;\n    console.log(main.menuActive);\n  }\n  main.toggleMenu = toggleMenu;\n\n\n\n\n\n\n\n\n\n  // main.getProfile = getProfile;\n\n  // const protectedStates = ['playersEdit', 'playersNew'];\n  //\n  // function secureState(e, toState) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //   }\n  // }\n\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n}\n","angular.module('goApp')\n  .controller('ProfileController', ProfileController);\n\nProfileController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction ProfileController($auth, $state, User, user) {\n  const profile = this;\n\n  profile.isLoggedIn = $auth.isAuthenticated;\n\n  if ($auth.getPayload()){\n    profile.currentUserId = $auth.getPayload()._id;\n  }\n  profile.currentUser = user;\n\n  if(profile.isLoggedIn()) {\n    User.get({ id: profile.currentUserId }, (data) => {\n      user.account = data;\n    });\n  }\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        profile.account = null;\n        $state.go('home');\n      });\n  }\n  profile.logout = logout;\n\n  profile.message = null;\n}\n","angular.module('goApp')\n  .controller('StoriesIndexController', StoriesIndexController)\n  .controller('StoriesNewController', StoriesNewController)\n  .controller('StoriesShowController', StoriesShowController)\n  .controller('StoriesEditController', StoriesEditController);\n\n\n//INDEX\nStoriesIndexController.$inject = ['Story'];\nfunction StoriesIndexController(Story) {\n  const storiesIndex = this;\n  storiesIndex.all = Story.query();\n}\n\n//CREATE\nStoriesNewController.$inject = ['Story', '$state'];\nfunction StoriesNewController(Story, $state) {\n  const storiesNew = this;\n  storiesNew.story = {};\n\n  function create() {\n    Story.save(storiesNew.story, () => {\n      $state.go('storyIndex');\n    });\n  }\n  storiesNew.create = create;\n}\n\n//SHOW & DELETE\nStoriesShowController.$inject = ['Story', '$state', '$auth'];\nfunction StoriesShowController(Story, $state, $auth) {\n  const storiesShow = this;\n\n  Story.get($state.params, (data) => {\n    storiesShow.story = data;\n\n    storiesShow.authStory = $auth.getPayload();\n    if (storiesShow.authStory) {\n      storiesShow.authStory = storiesShow.authStory._id;\n    }\n\n    storiesShow.isLoggedIn = $auth.isAuthenticated;\n    storiesShow.delete = deleteStory;\n  });\n\n  function deleteStory() {\n    storiesShow.story.$remove(() => {\n      $state.go('storiesIndex');\n    });\n  }\n}\n\n//EDIT\nStoriesEditController.$inject = ['Story', '$state', '$auth'];\nfunction StoriesEditController(Story, $state, $auth) {\n  const storiesEdit = this;\n\n  storiesEdit.authUser = $auth.getPayload();\n  if (storiesEdit.authUser) {\n    storiesEdit.authUser = storiesEdit.authUser._id;\n  }\n\n  Story.get({ id: storiesEdit.authUser }, (data) => {\n    storiesEdit.story = data;\n  });\n\n  function update() {\n    storiesEdit.story.$update((data) => {\n      console.log(data.bio);\n      $state.go('storiesShow', { id: storiesEdit.authUser });\n    });\n  }\n\n  storiesEdit.update = update;\n}\n","angular\n  .module('goApp')\n  .factory('Story', Story);\n\nStory.$inject = ['$resource'];\n\nfunction Story($resource) {\n  return new $resource('/stories/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular\n  .module('goApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\n\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .service('user', user);\n\nfunction user() {\n  var self = this;\n\n  self.account = {};\n}\n","angular.module('goApp')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\n//INDEX\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n//CREATE\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('userIndex');\n    });\n  }\n  usersNew.create = create;\n}\n\n//SHOW & DELETE\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  User.get($state.params, (data) => {\n    usersShow.user = data;\n\n    usersShow.authUser = $auth.getPayload();\n    if (usersShow.authUser) {\n      usersShow.authUser = usersShow.authUser._id;\n    }\n\n    usersShow.incrementLikes = userLikes;\n    usersShow.isLoggedIn = $auth.isAuthenticated;\n    usersShow.delete = deleteUser;\n  });\n\n  function userLikes() {\n    const userIdIndex = usersShow.user.likes.indexOf(usersShow.authUser);\n\n    if (!usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.push(usersShow.authUser);\n      usersShow.user.$update();\n    } else if (usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.splice(userIdIndex, 1);\n      usersShow.user.$update();\n    }\n  }\n\n  // function userChallenges () {\n  //   usersShow.users.activeChallenges.data.push(usersShow.authUser);\n  //   usersShow.users.activeChallenges.userId.push(usersShow.authUser);\n  //   usersShow.users.$update((data) => {\n  //     console.log(data);\n  //   });\n  // }\n  //\n  // usersShow.userChallenges = userChallenges;\n\n  // usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n}\n\n//EDIT\nUsersEditController.$inject = ['User', '$state', '$auth', 'user'];\nfunction UsersEditController(User, $state, $auth, user) {\n  const usersEdit = this;\n\n  console.log(user);\n\n  usersEdit.authUser = $auth.getPayload();\n  if (usersEdit.authUser) {\n    usersEdit.authUser = usersEdit.authUser._id;\n  }\n\n  User.get({ id: usersEdit.authUser }, (data) => {\n    usersEdit.user = data;\n\n    console.log(usersEdit.user);\n  });\n\n\n  function update() {\n    usersEdit.user.$update((data) => {\n      console.log(\"DATA HERE\", data);\n      console.log(data.bio);\n      $state.go('usersShow', { id: usersEdit.authUser });\n      user.account = data;\n    });\n  }\n\n  usersEdit.update = update;\n}\n"]}