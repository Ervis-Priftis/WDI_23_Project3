{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/challenge.js","js/controllers/challenges.js","js/services/currentUser.js","js/models/entry.js","js/directives/googleMap.js","js/controllers/main.js","js/controllers/profile.js","js/controllers/stories.js","js/models/story.js","js/models/user.js","js/services/user.js","js/controllers/users.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","ConfirmController","$http","method","params","confirmationCode","LoginController","User","login","isLoggedIn","console","log","credentials","currentUser","getPayload","get","id","_id","data","account","Challenge","$resource","update","ChallengesIndexController","challengesIndex","all","query","ChallengesNewController","create","save","challengesNew","challenge","payload","projectCreator","ChallengesShowController","deleteChallenge","challengesShow","$remove","challengeLike","userIdIndex","like","indexOf","includes","push","splice","$update","participate","indexId","participants","findIndex","participant","userProfile","Unparticipate","togglePopUp","popUpActive","addComment","comments","comment","isSubscribed","filter","length","$promise","incrementLikes","isAuthenticated","ChallengesEditController","challengesEdit","StoryEntries","googleplace","$window","restrict","require","scope","location","link","element","attrs","model","options","types","componentRestrictions","autocomplete","google","maps","places","Autocomplete","addListener","place","getPlace","geometry","toJSON","$setViewValue","val","googleMap","replace","template","$watch","map","Map","center","zoom","scrollwheel","Marker","position","animation","Animation","DROP","MainController","$rootScope","toggleMenu","main","menuActive","secureState","e","toState","message","protectedStates","name","preventDefault","$on","ProfileController","logout","profile","currentUserId","StoriesIndexController","Story","storiesIndex","StoriesCreateController","storiesCreate","story","authUser","userInfo","userId","StoriesCreateEntryController","addEntry","storiesCreateEntry","entries","new","order","StoriesShowController","deleteStory","storiesShow","delete","StoriesEditController","storiesEdit","entry","self","UsersIndexController","usersIndex","UsersNewController","usersNew","UsersShowController","$sce","userLikes","usersShow","likes","deleteUser","video","trustAsHtml","UsersEditController","usersEdit","angular","module","config","$inject","factory","service","directive"],"mappings":"YAMA,SAASA,QAAOC,EAAgBC,GAC9BD,EACGE,MAAM,mBACLC,IAAK,cACLC,YAAa,kCACbC,WAAY,iDAEbH,MAAM,iBACLC,IAAK,kBACLC,YAAa,gCACbC,WAAY,6CAEbH,MAAM,kBACLC,IAAK,kBACLC,YAAa,iCACbC,WAAY,+CAEbH,MAAM,kBACLC,IAAK,uBACLC,YAAa,iCACbC,WAAY,+CAEbH,MAAM,YACLC,IAAK,YACLC,YAAa,2BACbC,WAAY,mCAEbH,MAAM,mBACLC,IAAK,mBACLC,YAAa,oCAEdF,MAAM,WACLC,IAAK,6BACLC,YAAa,0BACbC,WAAY,iCAEbH,MAAM,SACLC,IAAK,SACLC,YAAa,wBACbC,WAAY,6BAEbH,MAAM,QACLC,IAAK,IACLC,YAAa,yBAGdF,MAAM,cACLC,IAAK,eACLC,YAAa,6BACbC,WAAY,uCAEbH,MAAM,aACLC,IAAK,wBACLC,YAAa,4BACbC,WAAY,qCAEbH,MAAM,aACLC,IAAK,mBACLC,YAAa,4BACbC,WAAY,qCAEbH,MAAM,gBACLC,IAAK,WACLC,YAAa,6BACbC,WAAY,2CAEbH,MAAM,iBACLC,IAAK,eACLC,YAAa,8BACbC,WAAY,6CAEbH,MAAM,sBACLC,IAAK,wBACLC,YAAa,mCACbC,WAAY,uDAEbH,MAAM,eACLC,IAAK,wBACLC,YAAa,4BACbC,WAAY,yCAEbH,MAAM,eACLC,IAAK,eACLC,YAAa,4BACbC,WAAY,yCAGhBJ,EAAmBK,UAAU,eAI/B,QAASC,MAAKC,GACZA,EAAcC,SAAW,SACzBD,EAAcE,UAAY,YAE1BF,EAAcG,YAAc,GC/F9B,QAASC,oBAAmBC,EAAOC,GAKjC,QAASC,KACPF,EAAMG,OAAOC,EAASC,MACrBC,KAAK,WACJL,EAAOM,GAAG,qBAPd,GAAMH,GAAWI,IAEjBJ,GAASC,QASTD,EAASF,OAASA,EAKpB,QAASO,mBAAkBC,EAAOT,GAChCS,GACEC,OAAQ,OACRrB,IAAAA,YAAiBW,EAAOW,OAAOC,mBAMnC,QAASC,iBAAgBd,EAAOC,EAAQc,EAAMV,GAK5C,QAASH,KACPc,EAAMC,YAAa,EACnBC,QAAQC,IAAIH,EAAMC,YAClBjB,EAAMgB,MAAMA,EAAMI,aACjBd,KAAK,WACJU,EAAMK,YAAcrB,EAAMsB,aAEvBN,EAAMK,aACPN,EAAKQ,KAAMC,GAAIR,EAAMK,YAAYI,KAAO,SAACC,GACvCrB,EAAKsB,QAAUD,EACfR,QAAQC,IAAId,EAAKgB,eAGrBpB,EAAOM,GAAG,UAjBd,GAAMS,GAAQR,IAEdQ,GAAMI,eAkBNJ,EAAMd,OAASA,ECjDjB,QAAS0B,WAAUC,GACjB,MAAO,IAAIA,GAAU,mBAAqBL,GAAI,SAC5CM,QAAUnB,OAAQ,SCCtB,QAASoB,2BAA0BH,GACjC,GAAMI,GAAkBxB,IACxBwB,GAAgBC,IAAML,EAAUM,QAMlC,QAASC,yBAAwBP,EAAW3B,EAAQD,GAOlD,QAASoC,KACPR,EAAUS,KAAKC,EAAcC,UAAW,WACtCtC,EAAOM,GAAG,qBARd,GAAM+B,GAAgB9B,KAChBgC,EAAUxC,EAAMsB,YAEtBgB,GAAcC,aACdD,EAAcC,UAAUE,gBAAkBD,EAAQf,KAUlDa,EAAcF,OAASA,EAKzB,QAASM,0BAAyBd,EAAWb,EAAMd,EAAQD,GAgBzD,QAAS2C,KACPC,EAAeL,UAAUM,QAAQ,WAC/B5C,EAAOM,GAAG,qBAId,QAASuC,KAEP,GAAIN,EAEG,CACL,GAAMO,GAAcH,EAAeL,UAAUS,KAAKC,QAAQT,EAAQf,MAC7DmB,EAAeL,UAAUS,KAAKE,SAASV,EAAQf,MAAUe,EAAQf,IACpEmB,EAAeL,UAAUS,KAAKG,KAAKX,EAAQf,KAClCmB,EAAeL,UAAUS,KAAKE,SAASV,EAAQf,MAAUe,EAAQf,KAC1EmB,EAAeL,UAAUS,KAAKI,OAAOL,EAAa,GAEpDH,EAAeL,UAAUc,cARzBpD,GAAOM,GAAG,SAYd,QAAS+C,KACP,GAAMC,GAAUX,EAAeL,UAAUiB,aAAaC,UAAU,SAACC,GAC/D,MAAOlB,GAAQf,MAAQiC,EAAYjC,KAElC8B,MAAY,IACbX,EAAeL,UAAUiB,aAAaL,KAAKP,EAAee,aAC1DzC,QAAQC,IAAIyB,EAAeL,UAAUiB,cAErCZ,EAAeL,UAAUc,WAI7B,QAASO,KACP,GAAML,GAAUX,EAAeL,UAAUiB,aAAaC,UAAU,SAACC,GAC/D,MAAOlB,GAAQf,MAAQiC,EAAYjC,KAErCmB,GAAeL,UAAUiB,aAAaJ,OAAOG,EAAS,GACtDX,EAAeL,UAAUc,UAG3B,QAASQ,KAEJrB,EACDI,EAAekB,aAAelB,EAAekB,YAE7C7D,EAAOM,GAAG,SAKd,QAASwD,KACPnB,EAAeL,UAAUyB,SAASb,KAAKP,EAAeqB,SACtDrB,EAAeL,UAAUc,QAAQ,WAC/BT,EAAeqB,QAAU,KAI7B,QAASC,KACP,GAAI1B,GACCI,EAAeL,UAChB,MAAOK,GAAeL,UAAUiB,aAAaW,OAAO,SAACT,GACnD,MAAOlB,GAAQf,MAAQiC,EAAYjC,MAClC2C,OAAS,EA7ElB,GAAMxB,GAAiBpC,KACjBgC,EAAUxC,EAAMsB,YAElBkB,IACFzB,EAAKQ,KAAMC,GAAIgB,EAAQf,KAAO,SAACC,GAC7BkB,EAAee,YAAcjC,IAKjCE,EAAUL,IAAItB,EAAOW,QAAQyD,SAAS/D,KAAK,SAACiC,GAC1CK,EAAeL,UAAYA,IAsE7BK,EAAeJ,QAAUA,EACzBI,EAAesB,aAAeA,EAC9BtB,EAAemB,WAAaA,EAC5BnB,EAAeiB,YAAcA,EAC7BjB,EAAegB,cAAgBA,EAC/BhB,EAAeU,YAAcA,EAC7BV,EAAe0B,eAAiBxB,EAChCF,EAAe3B,WAAajB,EAAMuE,gBAClC3B,EAAeD,gBAAkBA,EAInC,QAAS6B,0BAAyB5C,EAAW3B,GAK3C,QAAS6B,KACP2C,EAAelC,UAAUc,QAAQ,WAC/BpD,EAAOM,GAAG,iBAAkBN,EAAOW,UANvC,GAAM6D,GAAiBjE,IAEvBiE,GAAelC,UAAYX,EAAUL,IAAItB,EAAOW,QAQhDJ,KAAKsB,OAASA,ECzIhB,QAAST,aAAaN,EAAMf,GAC1B,GAAIK,GAAOG,KAGLa,EAAcrB,EAAMsB,YAEvBD,IACDN,EAAKQ,KAAMC,GAAIH,EAAYI,KAAO,SAACC,GACjCrB,EAAKsB,QAAUD,ICNrB,QAASgD,cAAa7C,GACpB,MAAO,IAAIA,GAAU,wBAA0BL,GAAI,SACjDM,QAAUnB,OAAQ,SCMtB,QAASgE,aAAYC,GACnB,OACEC,SAAU,IACVC,QAAS,UACTC,OACEC,SAAU,KAEZC,KAAM,SAASF,EAAOG,EAASC,EAAOC,GACpC,GAAMC,IACJC,SACAC,0BAGIC,EAAe,GAAIZ,GAAQa,OAAOC,KAAKC,OAAOC,aAAaV,EAAQ,GAAIG,EAE7EG,GAAaK,YAAY,gBAAiB,WACxC,GAAMC,GAAQN,EAAaO,UAC3BhB,GAAMC,SAAWc,EAAME,SAAShB,SAASiB,SACzCb,EAAMc,cAAchB,EAAQiB,WAOpC,QAASC,WAAUxB,GAEjB,OACEC,SAAU,IACVwB,SAAS,EACTC,SAAU,gDACVvB,OACExC,UAAW,KAEb0C,KAAM,SAASF,EAAOG,GACpBH,EAAMwB,OAAO,YAAa,WACxB,GAAGxB,EAAMxC,UAAW,CAElB,GAAMiE,GAAM,GAAI5B,GAAQa,OAAOC,KAAKe,IAAIvB,EAAQ,IAC9CwB,OAAQ3B,EAAMxC,UAAUyC,SACxB2B,KAAM,EACNC,aAAa,GAGf,IAAIhC,GAAQa,OAAOC,KAAKmB,QACtBC,SAAU/B,EAAMxC,UAAUyC,SAC1BwB,IAAKA,EACLO,UAAWnC,EAAQa,OAAOC,KAAKsB,UAAUC,YCzDrD,QAASC,gBAAelH,EAAOmH,EAAYlH,GAMzC,QAASmH,KACPlG,QAAQC,IAAI,kBACZkG,EAAKC,YAAcD,EAAKC,WACxBpG,QAAQC,IAAIkG,EAAKC,YAMnB,QAASC,GAAYC,EAAGC,GACtBJ,EAAKK,QAAU,MACX1H,EAAMuE,mBAAqBoD,EAAgBzE,SAASuE,EAAQG,QAC9DJ,EAAEK,iBACF5H,EAAOM,GAAG,SACV8G,EAAKK,QAAU,sCAnBnB,GAAML,GAAO7G,IAEb6G,GAAKpG,WAAajB,EAAMuE,gBACxB8C,EAAKhG,YAAcrB,EAAMsB,aAOzB+F,EAAKD,WAAaA,CAElB,IAAMO,IAAmB,iBAAkB,gBAW3CR,GAAWW,IAAI,oBAAqBP,GCxBtC,QAASQ,mBAAkB/H,EAAOC,EAAQc,EAAMV,GAgB9C,QAAS2H,KACPhI,EAAMgI,SACH1H,KAAK,WACJ2H,EAAQtG,QAAU,KAClB1B,EAAOM,GAAG,UAnBhB,GAAM0H,GAAUzH,IAEhByH,GAAQhH,WAAajB,EAAMuE,gBAEvBvE,EAAMsB,eACR2G,EAAQC,cAAgBlI,EAAMsB,aAAaG,KAE7CwG,EAAQ5G,YAAchB,EAEnB4H,EAAQhH,cACTF,EAAKQ,KAAMC,GAAIyG,EAAQC,eAAiB,SAACxG,GACvCrB,EAAKsB,QAAUD,IAWnBuG,EAAQD,OAASA,EAEjBC,EAAQP,QAAU,KCnBpB,QAASS,wBAAuBC,GAC9B,GAAMC,GAAe7H,IACrB6H,GAAapG,IAAMmG,EAAMlG,QAK3B,QAASoG,yBAAwBF,EAAOnI,EAAQD,EAAOe,GAgBrD,QAASqB,KACPgG,EAAM/F,KAAKkG,EAAcC,MAAO,SAAC9G,GAC/BzB,EAAOM,GAAG,sBAAuBiB,GAAIE,EAAKD,QAjB9C,GAAM8G,GAAgB/H,IAEtB+H,GAAcE,SAAWzI,EAAMsB,aAC3BiH,EAAcE,WAChBF,EAAcE,SAAWF,EAAcE,SAAShH,KAGlDV,EAAKQ,KAAMC,GAAI+G,EAAcE,UAAY,SAAC/G,GACxC6G,EAAcG,SAAWhH,IAG3B6G,EAAcC,OACZG,OAAQJ,EAAcE,UAQxBF,EAAcnG,OAASA,EAKzB,QAASwG,8BAA6BR,EAAOnI,EAAQD,GAiBnD,QAAS6I,KACPC,EAAmBN,MAAMO,QAAQ5F,KAAK2F,EAAmBE,KAEzDF,EAAmBN,MAAMnF,QAAQ,WAC/BpD,EAAOM,GAAG,cAAeN,EAAOW,UApBpC,GAAMkI,GAAqBtI,IAE3BsI,GAAmBL,SAAWzI,EAAMsB,aAChCwH,EAAmBL,WACrBK,EAAmBL,SAAWK,EAAmBL,SAAShH,KAG5D2G,EAAM7G,IAAKtB,EAAOW,OAAQ,SAACc,GACzBoH,EAAmBN,MAAQ9G,EAG3BoH,EAAmBE,KACjBC,MAAOH,EAAmBN,MAAMO,QAAQ3E,OAAS,KAYrD0E,EAAmBD,SAAWA,EAKhC,QAASK,uBAAsBd,EAAOnI,EAAQD,GAe5C,QAASmJ,KACPC,EAAYZ,MAAM3F,QAAQ,WACxB5C,EAAOM,GAAG,kBAhBd,GAAM6I,GAAc5I,IAEpB4H,GAAM7G,IAAItB,EAAOW,OAAQ,SAACc,GACxB0H,EAAYZ,MAAQ9G,EAEpB0H,EAAYX,SAAWzI,EAAMsB,aACzB8H,EAAYX,WACdW,EAAYX,SAAWW,EAAYX,SAAShH,KAG9C2H,EAAYnI,WAAajB,EAAMuE,gBAC/B6E,EAAYC,OAASF,IAYzB,QAASG,uBAAsBlB,EAAOnI,GAQpC,QAAS6B,KACPZ,QAAQC,IAAIoI,EAAYC,OAR1B,GAAMD,GAAc/I,IACpBU,SAAQC,IAAI,gBAEZiH,EAAM7G,IAAItB,EAAOW,OAAQ,SAACc,GACxB6H,EAAYC,MAAQ9H,IAUtB6H,EAAYzH,OAASA,EC1GvB,QAASsG,OAAMvG,GACb,MAAO,IAAIA,GAAU,gBAAkBL,GAAI,SACzCM,QAAUnB,OAAQ,SCFtB,QAASI,MAAKc,GACZ,MAAO,IAAIA,GAAU,cAAgBL,GAAI,SACvCM,QAAUnB,OAAQ,SCLtB,QAASN,QACP,GAAIoJ,GAAOjJ,IAEXiJ,GAAK9H,WCGP,QAAS+H,sBAAqB3I,GAC5B,GAAM4I,GAAanJ,IACnBmJ,GAAW1H,IAAMlB,EAAKmB,QAKxB,QAAS0H,oBAAmB7I,EAAMd,GAIhC,QAASmC,KACPrB,EAAKsB,KAAKwH,EAASxJ,KAAM,WACvBJ,EAAOM,GAAG,eALd,GAAMsJ,GAAWrJ,IACjBqJ,GAASxJ,QAOTwJ,EAASzH,OAASA,EAKpB,QAAS0H,qBAAoB/I,EAAMd,EAAQD,EAAO+J,GAqBhD,QAASC,KACP,GAAMjH,GAAckH,EAAU5J,KAAK6J,MAAMjH,QAAQgH,EAAUxB,WAEtDwB,EAAU5J,KAAK6J,MAAMhH,SAAS+G,EAAUxB,WAAewB,EAAUxB,UACpEwB,EAAU5J,KAAK6J,MAAM/G,KAAK8G,EAAUxB,UACpCwB,EAAU5J,KAAKgD,WACN4G,EAAU5J,KAAK6J,MAAMhH,SAAS+G,EAAUxB,WAAewB,EAAUxB,WAC1EwB,EAAU5J,KAAK6J,MAAM9G,OAAOL,EAAa,GACzCkH,EAAU5J,KAAKgD,WAenB,QAAS8G,KACPF,EAAU5J,KAAKwC,QAAQ,WACrB5C,EAAOM,GAAG,gBA7Cd,GAAM0J,GAAYzJ,IAElBO,GAAKQ,IAAItB,EAAOW,QAAQyD,SAAS/D,KAAK,SAACoB,GACrCuI,EAAU5J,KAAOqB,EAEjBuI,EAAUxB,SAAWzI,EAAMsB,aACvB2I,EAAUxB,WACZwB,EAAUxB,SAAWwB,EAAUxB,SAAShH,KAG1CP,QAAQC,IAAI8I,EAAU5J,MACtB4J,EAAU5J,KAAK+J,MAAQL,EAAKM,YAAYJ,EAAU5J,KAAK+J,OAEvDH,EAAU3F,eAAiB0F,EAC3BC,EAAUhJ,WAAajB,EAAMuE,gBAC7B0F,EAAUZ,OAASc,IAqCvB,QAASG,qBAAoBvJ,EAAMd,EAAQD,EAAOK,GAgBhD,QAASyB,KAEPyI,EAAUlK,KAAKgD,QAAQ,SAAC3B,GACtBzB,EAAOM,GAAG,aAAeiB,GAAI+I,EAAU9B,WACvCpI,EAAKsB,QAAUD,IAnBnB,GAAM6I,GAAY/J,IAElBU,SAAQC,IAAId,GAEZkK,EAAU9B,SAAWzI,EAAMsB,aACvBiJ,EAAU9B,WACZ8B,EAAU9B,SAAW8B,EAAU9B,SAAShH,KAG1CV,EAAKQ,KAAMC,GAAI+I,EAAU9B,WAAYpE,SAAS/D,KAAK,SAACoB,GAClD6I,EAAUlK,KAAOqB,EACjBR,QAAQC,IAAIoJ,EAAUlK,QAYxBkK,EAAUzI,OAASA,Eb3GrB0I,QACGC,OAAO,SAAU,aAAc,YAAa,eAC5CC,OAAOxL,QACPwL,OAAOhL,MAEVR,OAAOyL,SAAW,iBAAkB,sBA2FpCjL,KAAKiL,SAAW,iBChGhBH,QAAQC,OAAO,SACdjL,WAAW,qBAAsBO,oBACjCP,WAAW,oBAAqBiB,mBAChCjB,WAAW,kBAAmBsB,iBAE/Bf,mBAAmB4K,SAAW,QAAS,UAiBvClK,kBAAkBkK,SAAW,QAAS,UAStC7J,gBAAgB6J,SAAW,QAAS,SAAU,OAAQ,QC/BtDH,QAAQC,OAAO,SACZG,QAAQ,YAAahJ,WAExBA,UAAU+I,SAAW,aCHrBH,QAAQC,OAAO,SACZjL,WAAW,4BAA6BuC,2BACxCvC,WAAW,0BAA2B2C,yBACtC3C,WAAW,2BAA4BkD,0BACvClD,WAAW,2BAA4BgF,0BAE1CzC,0BAA0B4I,SAAW,aAQrCxI,wBAAwBwI,SAAW,YAAa,SAAU,SAoB1DjI,yBAAyBiI,SAAW,YAAa,OAAQ,SAAU,SA+FnEnG,yBAAyBmG,SAAW,YAAa,UCjIjDH,QAAQC,OAAO,SACZI,QAAQ,cAAexJ,aAE1BA,YAAYsJ,SAAW,OAAQ,SCH/BH,QACGC,OAAO,SACPG,QAAQ,eAAgBlG,cAE3BA,aAAaiG,SAAW,aCJxBH,QAAQC,OAAO,SACZK,UAAU,YAAa1E,WACvB0E,UAAU,cAAenG,aAW5BA,YAAYgG,SAAW,WAyBvBvE,UAAUuE,SAAW,WCtCrBH,QAAQC,OAAO,SACZjL,WAAW,iBAAkB0H,gBAEhCA,eAAeyD,SAAW,QAAS,aAAc,UCHjDH,QAAQC,OAAO,SACZjL,WAAW,oBAAqBuI,mBAEnCA,kBAAkB4C,SAAW,QAAS,SAAU,OAAQ,QCHxDH,QAAQC,OAAO,SACZjL,WAAW,yBAA0B2I,wBACrC3I,WAAW,0BAA2B8I,yBACtC9I,WAAW,+BAAgCoJ,8BAC3CpJ,WAAW,wBAAyB0J,uBACpC1J,WAAW,wBAAyB8J,uBAIvCnB,uBAAuBwC,SAAW,SAOlCrC,wBAAwBqC,SAAW,QAAS,SAAU,QAAS,QA0B/D/B,6BAA6B+B,SAAW,QAAS,SAAU,SA8B3DzB,sBAAsByB,SAAW,QAAS,SAAU,SAwBpDrB,sBAAsBqB,SAAW,QAAS,UChG1CH,QACGC,OAAO,SACPG,QAAQ,QAASxC,OAEpBA,MAAMuC,SAAW,aCJjBH,QACGC,OAAO,SACPG,QAAQ,OAAQ7J,MAEnBA,KAAK4J,SAAW,aCJhBH,QAAQC,OAAO,SACZI,QAAQ,OAAQxK,MCDnBmK,QAAQC,OAAO,SACZjL,WAAW,uBAAwBkK,sBACnClK,WAAW,qBAAsBoK,oBACjCpK,WAAW,sBAAuBsK,qBAClCtK,WAAW,sBAAuB8K,qBAIrCZ,qBAAqBiB,SAAW,QAOhCf,mBAAmBe,SAAW,OAAQ,UActCb,oBAAoBa,SAAW,OAAQ,SAAU,QAAS,QAqD1DL,oBAAoBK,SAAW,OAAQ,SAAU,QAAS","file":"app.js","sourcesContent":["angular\n  .module('goApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('challengesIndex', {\n      url: '/challenges',\n      templateUrl: '/templates/challengesIndex.html',\n      controller: 'ChallengesIndexController as challengesIndex'\n    })\n    .state('challengesNew', {\n      url: '/challenges/new',\n      templateUrl: '/templates/challengesNew.html',\n      controller: 'ChallengesNewController as challengesNew'\n    })\n    .state('challengesShow', {\n      url: '/challenges/:id',\n      templateUrl: '/templates/challengesShow.html',\n      controller: 'ChallengesShowController as challengesShow'\n    })\n    .state('challengesEdit', {\n      url: '/challenges/:id/edit',\n      templateUrl: '/templates/challengesEdit.html',\n      controller: 'ChallengesEditController as challengesEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('registerInterim', {\n      url: '/registerInterim',\n      templateUrl: '/templates/registerInterim.html'\n    })\n    .state('confirm', {\n      url: '/confirm/:confirmationCode',\n      templateUrl: '/templates/confirm.html',\n      controller: 'ConfirmController as confirm'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n      // controller: 'HomeController as home'\n    })\n    .state('usersIndex', {\n      url: '/challengers',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersEdit', {\n      url: '/challengers/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('usersShow', {\n      url: '/challengers/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('storiesIndex', {\n      url: '/stories',\n      templateUrl: '/templates/storyIndex.html',\n      controller: 'StoriesIndexController as storiesIndex'\n    })\n    .state('storiesCreate', {\n      url: '/stories/new',\n      templateUrl: '/templates/storyCreate.html',\n      controller: 'StoriesCreateController as storiesCreate'\n    })\n    .state('storiesCreateEntry', {\n      url: '/stories/:id/newEntry',\n      templateUrl: '/templates/storyCreateEntry.html',\n      controller: 'StoriesCreateEntryController as storiesCreateEntry'\n    })\n    .state('storiesEdit', {\n      url: '/stories/entries/:id/',\n      templateUrl: '/templates/storyEdit.html',\n      controller: 'StoriesEditController as storiesEdit'\n    })\n    .state('storiesShow', {\n      url: '/stories/:id',\n      templateUrl: '/templates/storyShow.html',\n      controller: 'StoriesShowController as storiesShow'\n    });\n\n  $urlRouterProvider.otherwise('/challenges');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('goApp')\n.controller('RegisterController', RegisterController)\n.controller('ConfirmController', ConfirmController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('registerInterim');\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nConfirmController.$inject = ['$http', '$state'];\nfunction ConfirmController($http, $state) {\n  $http({\n    method: 'POST',\n    url: `/confirm/${$state.params.confirmationCode}`\n  });\n}\n\n\nLoginController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction LoginController($auth, $state, User, user) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    login.isLoggedIn = true;\n    console.log(login.isLoggedIn);\n    $auth.login(login.credentials)\n    .then(() => {\n      login.currentUser = $auth.getPayload();\n\n      if(login.currentUser) {\n        User.get({ id: login.currentUser._id }, (data) => {\n          user.account = data;\n          console.log(user.currentUser);\n        });\n      }\n      $state.go('home');\n    });\n  }\n  login.submit = submit;\n}\n","angular.module('goApp')\n  .factory('Challenge', Challenge);\n\nChallenge.$inject = ['$resource'];\nfunction Challenge($resource) {\n  return new $resource('/challenges/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('ChallengesIndexController', ChallengesIndexController)\n  .controller('ChallengesNewController', ChallengesNewController)\n  .controller('ChallengesShowController', ChallengesShowController)\n  .controller('ChallengesEditController', ChallengesEditController);\n\nChallengesIndexController.$inject = ['Challenge'];\nfunction ChallengesIndexController(Challenge) {\n  const challengesIndex = this;\n  challengesIndex.all = Challenge.query();\n  // console.log('In the challenge index controller');\n}\n\n\nChallengesNewController.$inject = ['Challenge', '$state', '$auth'];\nfunction ChallengesNewController(Challenge, $state, $auth) {\n  const challengesNew = this;\n  const payload = $auth.getPayload();\n\n  challengesNew.challenge = {};\n  challengesNew.challenge.projectCreator = [payload._id];\n\n  function create() {\n    Challenge.save(challengesNew.challenge, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n\n\n  challengesNew.create = create;\n}\n\n//SHOW\nChallengesShowController.$inject = ['Challenge', 'User', '$state', '$auth'];\nfunction ChallengesShowController(Challenge, User, $state, $auth) {\n\n  const challengesShow = this;\n  const payload = $auth.getPayload();\n\n  if (payload) {\n    User.get({ id: payload._id }, (data)=> {\n      challengesShow.userProfile = data;\n    });\n  }\n\n\n  Challenge.get($state.params).$promise.then((challenge) => {\n    challengesShow.challenge = challenge;\n  });\n\n  function deleteChallenge() {\n    challengesShow.challenge.$remove(() => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  function challengeLike() {\n\n    if(!payload){\n      $state.go('login');\n    } else {\n      const userIdIndex = challengesShow.challenge.like.indexOf(payload._id);\n      if (!challengesShow.challenge.like.includes(payload._id) && !!payload._id) {\n        challengesShow.challenge.like.push(payload._id);\n      } else if (challengesShow.challenge.like.includes(payload._id) && !!payload._id) {\n        challengesShow.challenge.like.splice(userIdIndex, 1);\n      }\n      challengesShow.challenge.$update();\n    }\n  }\n\n  function participate() {\n    const indexId = challengesShow.challenge.participants.findIndex((participant) => {\n      return payload._id === participant._id;\n    });\n    if(indexId === -1) {\n      challengesShow.challenge.participants.push(challengesShow.userProfile);\n      console.log(challengesShow.challenge.participants);\n\n      challengesShow.challenge.$update();\n    }\n  }\n\n  function Unparticipate() {\n    const indexId = challengesShow.challenge.participants.findIndex((participant) => {\n      return payload._id === participant._id;\n    });\n    challengesShow.challenge.participants.splice(indexId, 1);\n    challengesShow.challenge.$update();\n  }\n\n  function togglePopUp() {\n    // console.log('In toggle pop up');\n    if(payload) {\n      challengesShow.popUpActive = !challengesShow.popUpActive;\n    } else {\n      $state.go('login');\n    }\n\n  }\n\n  function addComment(){\n    challengesShow.challenge.comments.push(challengesShow.comment);\n    challengesShow.challenge.$update(() => {\n      challengesShow.comment = '';\n    });\n  }\n\n  function isSubscribed() {\n    if (payload) {\n      if(challengesShow.challenge) {\n        return challengesShow.challenge.participants.filter((participant) => {\n          return payload._id === participant._id;\n        }).length > 0;\n      }\n    }\n  }\n  challengesShow.payload = payload;\n  challengesShow.isSubscribed = isSubscribed;\n  challengesShow.addComment = addComment;\n  challengesShow.togglePopUp = togglePopUp;\n  challengesShow.Unparticipate = Unparticipate;\n  challengesShow.participate = participate;\n  challengesShow.incrementLikes = challengeLike;\n  challengesShow.isLoggedIn = $auth.isAuthenticated;\n  challengesShow.deleteChallenge = deleteChallenge;\n}\n\nChallengesEditController.$inject = ['Challenge', '$state'];\nfunction ChallengesEditController(Challenge, $state) {\n  const challengesEdit = this;\n\n  challengesEdit.challenge = Challenge.get($state.params);\n  \n  function update() {\n    challengesEdit.challenge.$update(() => {\n      $state.go('challengesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('goApp')\n  .service('currentUser', currentUser);\n\ncurrentUser.$inject = ['User', '$auth'];\nfunction currentUser (User, $auth) {\n  var user = this;\n\n  // const isLoggedIn = $auth.isAuthenticated;\n  const currentUser = $auth.getPayload();\n\n  if(currentUser) {\n    User.get({ id: currentUser._id }, (data) => {\n      user.account = data;\n    });\n  }\n}\n","angular\n  .module('goApp')\n  .factory('StoryEntries', StoryEntries);\n\nStoryEntries.$inject = ['$resource'];\n\nfunction StoryEntries($resource) {\n  return new $resource('/stories/entries/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .directive('googleMap', googleMap)\n  .directive('googleplace', googleplace);\n\n\n\n// let geocoder = new google.maps.Geocoder();\n// geocoder.geocode( { 'address': $scope.textfield }, function(results, status) {\n//   if(status === google.maps.GeocoderStatus.OK && results.length > 0) {\n//     let location = results[0].geometry.location;\n//     $scope.myMap.panTo(location);\n//   }\n// });\ngoogleplace.$inject = ['$window'];\nfunction googleplace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      location: '='\n    },\n    link: function(scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: {}\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        scope.location = place.geometry.location.toJSON();\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\">Google Map HERE</div>',\n    scope: {\n      challenge: '='\n    },\n    link: function(scope, element) {\n      scope.$watch('challenge', () => {\n        if(scope.challenge) {\n\n          const map = new $window.google.maps.Map(element[0], {\n            center: scope.challenge.location,\n            zoom: 6,\n            scrollwheel: false\n          });\n\n          new $window.google.maps.Marker({\n            position: scope.challenge.location,\n            map: map,\n            animation: $window.google.maps.Animation.DROP\n          });\n        }\n      });\n\n    }\n  };\n}\n","angular.module('goApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$rootScope', '$state'];\nfunction MainController($auth, $rootScope, $state) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.currentUser = $auth.getPayload();\n\n  function toggleMenu() {\n    console.log('in toggle menu');\n    main.menuActive = !main.menuActive;\n    console.log(main.menuActive);\n  }\n  main.toggleMenu = toggleMenu;\n\n  const protectedStates = ['challengesEdit', 'challengesNew'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n}\n","angular.module('goApp')\n  .controller('ProfileController', ProfileController);\n\nProfileController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction ProfileController($auth, $state, User, user) {\n  const profile = this;\n\n  profile.isLoggedIn = $auth.isAuthenticated;\n  \n  if ($auth.getPayload()){\n    profile.currentUserId = $auth.getPayload()._id;\n  }\n  profile.currentUser = user;\n\n  if(profile.isLoggedIn()) {\n    User.get({ id: profile.currentUserId }, (data) => {\n      user.account = data;\n    });\n  }\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        profile.account = null;\n        $state.go('home');\n      });\n  }\n  profile.logout = logout;\n\n  profile.message = null;\n}\n","angular.module('goApp')\n  .controller('StoriesIndexController', StoriesIndexController)\n  .controller('StoriesCreateController', StoriesCreateController)\n  .controller('StoriesCreateEntryController', StoriesCreateEntryController)\n  .controller('StoriesShowController', StoriesShowController)\n  .controller('StoriesEditController', StoriesEditController);\n\n\n//INDEX\nStoriesIndexController.$inject = ['Story'];\nfunction StoriesIndexController(Story) {\n  const storiesIndex = this;\n  storiesIndex.all = Story.query();\n}\n\n//CREATE\nStoriesCreateController.$inject = ['Story', '$state', '$auth', 'User'];\nfunction StoriesCreateController(Story, $state, $auth, User) {\n  const storiesCreate = this;\n\n  storiesCreate.authUser = $auth.getPayload();\n  if (storiesCreate.authUser) {\n    storiesCreate.authUser = storiesCreate.authUser._id;\n  }\n\n  User.get({ id: storiesCreate.authUser }, (data) => {\n    storiesCreate.userInfo = data;\n  });\n\n  storiesCreate.story = {\n    userId: storiesCreate.authUser\n  };\n\n  function create() {\n    Story.save(storiesCreate.story, (data) => {\n      $state.go('storiesCreateEntry', {id: data._id});\n    });\n  }\n  storiesCreate.create = create;\n}\n\n// Create entry\nStoriesCreateEntryController.$inject = ['Story', '$state', '$auth'];\nfunction StoriesCreateEntryController(Story, $state, $auth) {\n  const storiesCreateEntry = this;\n\n  storiesCreateEntry.authUser = $auth.getPayload();\n  if (storiesCreateEntry.authUser) {\n    storiesCreateEntry.authUser = storiesCreateEntry.authUser._id;\n  }\n\n  Story.get( $state.params, (data) => {\n    storiesCreateEntry.story = data;\n\n\n    storiesCreateEntry.new = {\n      order: storiesCreateEntry.story.entries.length + 1\n    };\n  });\n\n  function addEntry() {\n    storiesCreateEntry.story.entries.push(storiesCreateEntry.new);\n\n    storiesCreateEntry.story.$update(() => {\n      $state.go('storiesShow', $state.params );\n    });\n  }\n\n  storiesCreateEntry.addEntry = addEntry;\n}\n\n//SHOW & DELETE\nStoriesShowController.$inject = ['Story', '$state', '$auth'];\nfunction StoriesShowController(Story, $state, $auth) {\n  const storiesShow = this;\n\n  Story.get($state.params, (data) => {\n    storiesShow.story = data;\n\n    storiesShow.authUser = $auth.getPayload();\n    if (storiesShow.authUser) {\n      storiesShow.authUser = storiesShow.authUser._id;\n    }\n\n    storiesShow.isLoggedIn = $auth.isAuthenticated;\n    storiesShow.delete = deleteStory;\n  });\n\n  function deleteStory() {\n    storiesShow.story.$remove(() => {\n      $state.go('storiesIndex');\n    });\n  }\n}\n\n//EDIT\nStoriesEditController.$inject = ['Story', '$state'];\nfunction StoriesEditController(Story, $state) {\n  const storiesEdit = this;\n  console.log('I am working');\n\n  Story.get($state.params, (data) => {\n    storiesEdit.entry = data;\n  });\n\n  function update() {\n    console.log(storiesEdit.entry);\n    // storiesEdit.entry.$update((data) => {\n    //   $state.go('storiesShow', { id: storiesEdit.authUser });\n    // });\n  }\n\n  storiesEdit.update = update;\n}\n","angular\n  .module('goApp')\n  .factory('Story', Story);\n\nStory.$inject = ['$resource'];\n\nfunction Story($resource) {\n  return new $resource('/stories/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular\n  .module('goApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\n\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .service('user', user);\n\nfunction user() {\n  var self = this;\n\n  self.account = {};\n}\n","angular.module('goApp')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\n//INDEX\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n//CREATE\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('userIndex');\n    });\n  }\n  usersNew.create = create;\n}\n\n//SHOW & DELETE\nUsersShowController.$inject = ['User', '$state', '$auth', '$sce'];\nfunction UsersShowController(User, $state, $auth, $sce) {\n  const usersShow = this;\n\n  User.get($state.params).$promise.then((data) => {\n    usersShow.user = data;\n\n    usersShow.authUser = $auth.getPayload();\n    if (usersShow.authUser) {\n      usersShow.authUser = usersShow.authUser._id;\n    }\n\n    console.log(usersShow.user);\n    usersShow.user.video = $sce.trustAsHtml(usersShow.user.video);\n\n    usersShow.incrementLikes = userLikes;\n    usersShow.isLoggedIn = $auth.isAuthenticated;\n    usersShow.delete = deleteUser;\n  }\n\n  );\n\n  function userLikes() {\n    const userIdIndex = usersShow.user.likes.indexOf(usersShow.authUser);\n\n    if (!usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.push(usersShow.authUser);\n      usersShow.user.$update();\n    } else if (usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.splice(userIdIndex, 1);\n      usersShow.user.$update();\n    }\n  }\n\n  // function userChallenges () {\n  //   usersShow.users.activeChallenges.data.push(usersShow.authUser);\n  //   usersShow.users.activeChallenges.userId.push(usersShow.authUser);\n  //   usersShow.users.$update((data) => {\n  //     console.log(data);\n  //   });\n  // }\n  //\n  // usersShow.userChallenges = userChallenges;\n\n  // usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n}\n\n//EDIT\nUsersEditController.$inject = ['User', '$state', '$auth', 'user'];\nfunction UsersEditController(User, $state, $auth, user) {\n  const usersEdit = this;\n\n  console.log(user);\n\n  usersEdit.authUser = $auth.getPayload();\n  if (usersEdit.authUser) {\n    usersEdit.authUser = usersEdit.authUser._id;\n  }\n\n  User.get({ id: usersEdit.authUser }).$promise.then((data) => {\n    usersEdit.user = data;\n    console.log(usersEdit.user);\n  });\n\n\n  function update() {\n\n    usersEdit.user.$update((data) => {\n      $state.go('usersShow', { id: usersEdit.authUser });\n      user.account = data;\n    });\n  }\n\n  usersEdit.update = update;\n}\n"]}