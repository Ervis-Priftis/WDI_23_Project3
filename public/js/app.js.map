{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/challenge.js","js/controllers/challenges.js","js/controllers/main.js","js/controllers/user.js","js/models/user.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","ConfirmController","$http","method","params","confirmationCode","LoginController","login","credentials","Challenge","$resource","id","update","ChallengesIndexController","challengesIndex","all","query","ChallengesNewController","create","save","challengesNew","challenge","ChallengesShowController","deleteChallenge","challengesShow","$remove","challengeLike","like","$update","get","incrementLikes","isLoggedIn","isAuthenticated","delete","ChallengesEditController","challengesEdit","MainController","logout","main","currentUser","getPayload","message","UsersIndexController","User","usersIndex","UsersNewController","usersNew","UsersShowController","userLikes","usersShow","likes","includes","authUser","push","console","log","data","deleteUser","totalLikes","length","_id","UsersEditController","usersEdit","angular","module","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('goApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('challengesIndex', {\n      url: '/challenges',\n      templateUrl: '/templates/challengesIndex.html',\n      controller: 'ChallengesIndexController as challengesIndex'\n    })\n    .state('challengesNew', {\n      url: '/challenges/new',\n      templateUrl: '/templates/challengesNew.html',\n      controller: 'ChallengesNewController as challengesNew'\n    })\n    .state('challengesShow', {\n      url: '/challenges/:id',\n      templateUrl: '/templates/challengesShow.html',\n      controller: 'ChallengesShowController as challengesShow'\n    })\n    .state('challengesEdit', {\n      url: '/challenges/:id/edit',\n      templateUrl: '/templates/challengesEdit.html',\n      controller: 'ChallengesEditController as challengesEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('confirm', {\n      url: '/confirm/:confirmationCode',\n      templateUrl: '/templates/confirm.html',\n      controller: 'ConfirmController as confirm'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n      // controller: 'HomeController as home'\n    })\n    .state('usersIndex', {\n      url: '/challengers',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersEdit', {\n      url: '/challengers/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('usersShow', {\n      url: '/challengers/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    });\n\n  $urlRouterProvider.otherwise('/challenges');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('goApp')\n  .controller('RegisterController', RegisterController)\n  .controller('ConfirmController', ConfirmController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('home');\n      });\n  }\n\n  register.submit = submit;\n}\n\nConfirmController.$inject = ['$http', '$state'];\nfunction ConfirmController($http, $state) {\n  $http({\n    method: 'POST',\n    url: `/confirm/${$state.params.confirmationCode}`\n  }).then(() => {\n    $state.go('login');\n  });\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('home');\n      });\n\n  }\n  login.submit = submit;\n}\n","angular.module('goApp')\n  .factory('Challenge', Challenge);\n\nChallenge.$inject = ['$resource'];\nfunction Challenge($resource) {\n  return new $resource('/challenges/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('ChallengesIndexController', ChallengesIndexController)\n  .controller('ChallengesNewController', ChallengesNewController)\n  .controller('ChallengesShowController', ChallengesShowController)\n  .controller('ChallengesEditController', ChallengesEditController);\n\nChallengesIndexController.$inject = ['Challenge'];\nfunction ChallengesIndexController(Challenge) {\n  const challengesIndex = this;\n\n  challengesIndex.all = Challenge.query();\n}\n\n\nChallengesNewController.$inject = ['Challenge', '$state'];\nfunction ChallengesNewController(Challenge, $state) {\n  const challengesNew = this;\n\n  challengesNew.challenge = {};\n\n  function create() {\n    Challenge.save(challengesNew.challenge, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  challengesNew.create = create;\n}\n\n//SHOW\nChallengesShowController.$inject = ['Challenge', '$state', '$auth'];\nfunction ChallengesShowController(Challenge, $state, $auth) {\n\n  const challengesShow = this;\n\n  challengesShow.challenge = Challenge.get($state.params);\n\n  function deleteChallenge() {\n    challengesShow.challenge.$remove(() => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  function challengeLike() {\n    challengesShow.challenge.like ++;\n    challengesShow.challenge.$update();\n  }\n\n  challengesShow.incrementLikes = challengeLike;\n  challengesShow.isLoggedIn = $auth.isAuthenticated;\n  challengesShow.delete = deleteChallenge;\n}\n\nChallengesEditController.$inject = ['Challenge', '$state'];\nfunction ChallengesEditController(Challenge, $state) {\n  const challengesEdit = this;\n\n  challengesEdit.challenge = Challenge.get($state.params);\n\n  function update() {\n    challengesEdit.challenge.$update(() => {\n      $state.go('challengesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('goApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state'];\nfunction MainController($auth, $state) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  main.currentUser = $auth.getPayload();\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('home');\n      });\n  }\n  main.logout = logout;\n\n  main.message = null;\n  // const protectedStates = ['playersEdit', 'playersNew'];\n  //\n  // function secureState(e, toState) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //   }\n  // }\n\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n}\n","angular.module('goApp')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\n//INDEX\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n//CREATE\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('userIndex');\n    });\n  }\n  usersNew.create = create;\n}\n\n//SHOW & DELETE\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  User.get($state.params, (data) => {\n    usersShow.user = data;\n    data.totalLikes = usersShow.user.likes.length;\n\n    usersShow.authUser = $auth.getPayload();\n\n    if (usersShow.authUser) {\n      usersShow.authUser = usersShow.authUser._id;\n    }\n\n    usersShow.incrementLikes = userLikes;\n    usersShow.isLoggedIn = $auth.isAuthenticated;\n    usersShow.delete = deleteUser;\n  });\n\n  function userLikes() {\n    if (!usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.push(usersShow.authUser);\n      // usersShow.user.$update();\n      console.log(usersShow.user);\n      usersShow.user.$update((data) => {\n        console.log(data);\n      });\n    }\n  }\n\n  // usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n}\n\n//EDIT\nUsersEditController.$inject = ['User', '$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get({ id: $auth.getPayload()._id });\n\n  console.log(usersEdit.user);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular\n  .module('goApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\n\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}