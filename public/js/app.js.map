{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/challenge.js","js/controllers/challenges.js","js/controllers/main.js","js/controllers/user.js","js/models/user.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","facebook","clientId","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","authenticate","service","Challenge","$resource","id","update","method","ChallengesIndexController","challengesIndex","all","query","ChallengesNewController","create","save","challengesNew","challenge","ChallengesShowController","deleteChallenge","challengesShow","$remove","challengeLike","like","$update","participate","participants","data","push","authUser","userId","console","log","getPayload","_id","get","params","incrementLikes","isLoggedIn","isAuthenticated","delete","ChallengesEditController","challengesEdit","MainController","logout","main","currentUser","message","UsersIndexController","User","usersIndex","UsersNewController","usersNew","UsersShowController","userLikes","usersShow","likes","includes","deleteUser","UsersEditController","usersEdit","bio","angular","module","config","$inject","factory"],"mappings":"YAMA,SAASA,QAAOC,EAAgBC,GAC9BD,EACGE,MAAM,mBACLC,IAAK,cACLC,YAAa,kCACbC,WAAY,iDAEbH,MAAM,iBACLC,IAAK,kBACLC,YAAa,gCACbC,WAAY,6CAEbH,MAAM,kBACLC,IAAK,kBACLC,YAAa,iCACbC,WAAY,+CAEbH,MAAM,kBACLC,IAAK,uBACLC,YAAa,iCACbC,WAAY,+CAEbH,MAAM,YACLC,IAAK,YACLC,YAAa,2BACbC,WAAY,mCAEbH,MAAM,SACLC,IAAK,SACLC,YAAa,wBACbC,WAAY,6BAEbH,MAAM,QACLC,IAAK,IACLC,YAAa,yBAGdF,MAAM,cACLC,IAAK,eACLC,YAAa,6BACbC,WAAY,uCAEbH,MAAM,aACLC,IAAK,wBACLC,YAAa,4BACbC,WAAY,qCAEbH,MAAM,aACLC,IAAK,mBACLC,YAAa,4BACbC,WAAY,qCAGhBJ,EAAmBK,UAAU,eAI/B,QAASC,MAAKC,GACZA,EAAcC,UACZC,SAAU,oBAGZF,EAAcG,SAAW,SACzBH,EAAcI,UAAY,YAE1BJ,EAAcK,YAAc,GClE9B,QAASC,oBAAmBC,EAAOC,GAKjC,QAASC,KACPF,EAAMG,OAAOC,EAASC,MACrBC,KAAK,WACJL,EAAOM,GAAG,UAPd,GAAMH,GAAWI,IAEjBJ,GAASC,QASTD,EAASF,OAASA,EAIpB,QAASO,iBAAgBT,EAAOC,GAK9B,QAASC,KACPF,EAAMU,MAAMA,EAAMC,aACjBL,KAAK,WACJL,EAAOM,GAAG,UAId,QAASK,GAAaC,GACpBb,EAAMY,aAAaC,EAAS,WAC1BZ,EAAOM,GAAG,qBAbd,GAAMG,GAAQF,IAEdE,GAAMC,eAeND,EAAME,aAAeA,EACrBF,EAAMR,OAASA,ECpCjB,QAASY,WAAUC,GACjB,MAAO,IAAIA,GAAU,mBAAqBC,GAAI,SAC5CC,QAAUC,OAAQ,SCCtB,QAASC,2BAA0BL,GACjC,GAAMM,GAAkBZ,IAExBY,GAAgBC,IAAMP,EAAUQ,QAKlC,QAASC,yBAAwBT,EAAWb,GAK1C,QAASuB,KACPV,EAAUW,KAAKC,EAAcC,UAAW,WACtC1B,EAAOM,GAAG,qBANd,GAAMmB,GAAgBlB,IAEtBkB,GAAcC,aAQdD,EAAcF,OAASA,EAKzB,QAASI,0BAAyBd,EAAWb,EAAQD,GAUnD,QAAS6B,KACPC,EAAeH,UAAUI,QAAQ,WAC/B9B,EAAOM,GAAG,qBAId,QAASyB,KACPF,EAAeH,UAAUM,OACzBH,EAAeH,UAAUO,UAG3B,QAASC,KACPL,EAAeH,UAAUS,aAAaC,KAAKC,KAAKR,EAAeS,UAC/DT,EAAeH,UAAUS,aAAaI,OAAOF,KAAKR,EAAeS,UACjET,EAAeH,UAAUO,QAAQ,SAACG,GAChCI,QAAQC,IAAIL,KAvBhB,GAAMP,GAAiBtB,IACvBsB,GAAeS,SAAWvC,EAAM2C,aAC5Bb,EAAeS,WACjBT,EAAeS,SAAWT,EAAeS,SAASK,KAGpDd,EAAeH,UAAYb,EAAU+B,IAAI5C,EAAO6C,QAChDL,QAAQC,IAAIZ,EAAeH,WAoB3BG,EAAeK,YAAcA,EAC7BL,EAAeiB,eAAiBf,EAChCF,EAAekB,WAAahD,EAAMiD,gBAClCnB,EAAeoB,OAASrB,EAI1B,QAASsB,0BAAyBrC,EAAWb,GAK3C,QAASgB,KACPmC,EAAezB,UAAUO,QAAQ,WAC/BjC,EAAOM,GAAG,iBAAkBN,EAAO6C,UANvC,GAAMM,GAAiB5C,IAEvB4C,GAAezB,UAAYb,EAAU+B,IAAI5C,EAAO6C,QAQhDtC,KAAKS,OAASA,EC1EhB,QAASoC,gBAAerD,EAAOC,GAO7B,QAASqD,KACPtD,EAAMsD,SACHhD,KAAK,WACJL,EAAOM,GAAG,UAThB,GAAMgD,GAAO/C,IAEb+C,GAAKP,WAAahD,EAAMiD,gBAExBM,EAAKC,YAAcxD,EAAM2C,aAQzBY,EAAKD,OAASA,EAEdC,EAAKE,QAAU,KCVjB,QAASC,sBAAqBC,GAC5B,GAAMC,GAAapD,IACnBoD,GAAWvC,IAAMsC,EAAKrC,QAKxB,QAASuC,oBAAmBF,EAAM1D,GAIhC,QAASuB,KACPmC,EAAKlC,KAAKqC,EAASzD,KAAM,WACvBJ,EAAOM,GAAG,eALd,GAAMuD,GAAWtD,IACjBsD,GAASzD,QAOTyD,EAAStC,OAASA,EAKpB,QAASuC,qBAAoBJ,EAAM1D,EAAQD,GAgBzC,QAASgE,MACFC,EAAU5D,KAAK6D,MAAMC,SAASF,EAAU1B,WAAe0B,EAAU1B,WACpE0B,EAAU5D,KAAK6D,MAAM5B,KAAK2B,EAAU1B,UACpC0B,EAAU5D,KAAK6B,WAenB,QAASkC,KACPH,EAAU5D,KAAK0B,QAAQ,WACrB9B,EAAOM,GAAG,gBAnCd,GAAM0D,GAAYzD,IAElBmD,GAAKd,IAAI5C,EAAO6C,OAAQ,SAACT,GACvB4B,EAAU5D,KAAOgC,EAEjB4B,EAAU1B,SAAWvC,EAAM2C,aACvBsB,EAAU1B,WACZ0B,EAAU1B,SAAW0B,EAAU1B,SAASK,KAG1CqB,EAAUlB,eAAiBiB,EAC3BC,EAAUjB,WAAahD,EAAMiD,gBAC7BgB,EAAUf,OAASkB,IA8BvB,QAASC,qBAAoBV,EAAM1D,EAAQD,GAezC,QAASiB,KACPqD,EAAUjE,KAAK6B,QAAQ,SAACG,GACtBI,QAAQC,IAAIL,EAAKkC,KACjBtE,EAAOM,GAAG,aAAeS,GAAIsD,EAAU/B,aAjB3C,GAAM+B,GAAY9D,IAElB8D,GAAU/B,SAAWvC,EAAM2C,aACvB2B,EAAU/B,WACZ+B,EAAU/B,SAAW+B,EAAU/B,SAASK,KAG1Ce,EAAKd,KAAM7B,GAAIsD,EAAU/B,UAAY,SAACF,GACpCiC,EAAUjE,KAAOgC,EAEjBI,QAAQC,IAAI4B,EAAUjE,QAWxBiE,EAAUrD,OAASA,ECzFrB,QAAS0C,MAAK5C,GACZ,MAAO,IAAIA,GAAU,cAAgBC,GAAI,SACvCC,QAAUC,OAAQ,SNRtBsD,QACGC,OAAO,SAAU,aAAc,YAAa,eAC5CC,OAAO1F,QACP0F,OAAOlF,MAEVR,OAAO2F,SAAW,iBAAkB,sBAyDpCnF,KAAKmF,SAAW,iBC9DhBH,QAAQC,OAAO,SACdnF,WAAW,qBAAsBS,oBACjCT,WAAW,kBAAmBmB,iBAE/BV,mBAAmB4E,SAAW,QAAS,UAgBvClE,gBAAgBkE,SAAW,QAAS,UCpBpCH,QAAQC,OAAO,SACZG,QAAQ,YAAa9D,WAExBA,UAAU6D,SAAW,aCHrBH,QAAQC,OAAO,SACZnF,WAAW,4BAA6B6B,2BACxC7B,WAAW,0BAA2BiC,yBACtCjC,WAAW,2BAA4BsC,0BACvCtC,WAAW,2BAA4B6D,0BAE1ChC,0BAA0BwD,SAAW,aAQrCpD,wBAAwBoD,SAAW,YAAa,UAgBhD/C,yBAAyB+C,SAAW,YAAa,SAAU,SAoC3DxB,yBAAyBwB,SAAW,YAAa,UClEjDH,QAAQC,OAAO,SACZnF,WAAW,iBAAkB+D,gBAEhCA,eAAesB,SAAW,QAAS,UCHnCH,QAAQC,OAAO,SACZnF,WAAW,uBAAwBoE,sBACnCpE,WAAW,qBAAsBuE,oBACjCvE,WAAW,sBAAuByE,qBAClCzE,WAAW,sBAAuB+E,qBAIrCX,qBAAqBiB,SAAW,QAOhCd,mBAAmBc,SAAW,OAAQ,UActCZ,oBAAoBY,SAAW,OAAQ,SAAU,SA2CjDN,oBAAoBM,SAAW,OAAQ,SAAU,SCxEjDH,QACGC,OAAO,SACPG,QAAQ,OAAQjB,MAEnBA,KAAKgB,SAAW","file":"app.js","sourcesContent":["angular\n  .module('goApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('challengesIndex', {\n      url: '/challenges',\n      templateUrl: '/templates/challengesIndex.html',\n      controller: 'ChallengesIndexController as challengesIndex'\n    })\n    .state('challengesNew', {\n      url: '/challenges/new',\n      templateUrl: '/templates/challengesNew.html',\n      controller: 'ChallengesNewController as challengesNew'\n    })\n    .state('challengesShow', {\n      url: '/challenges/:id',\n      templateUrl: '/templates/challengesShow.html',\n      controller: 'ChallengesShowController as challengesShow'\n    })\n    .state('challengesEdit', {\n      url: '/challenges/:id/edit',\n      templateUrl: '/templates/challengesEdit.html',\n      controller: 'ChallengesEditController as challengesEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n      // controller: 'HomeController as home'\n    })\n    .state('usersIndex', {\n      url: '/challengers',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersEdit', {\n      url: '/challengers/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('usersShow', {\n      url: '/challengers/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    });\n\n  $urlRouterProvider.otherwise('/challenges');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.facebook({\n    clientId: '199317997186512'\n  });\n  \n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('goApp')\n.controller('RegisterController', RegisterController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('home');\n    });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('home');\n    });\n\n  }\n  function authenticate(service) {\n    $auth.authenticate(service, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  login.authenticate = authenticate;\n  login.submit = submit;\n}\n\n// function onSignIn(googleUser) {\n//   const profile = googleUser.getBasicProfile();\n//   console.log('ID: ' + profile.getId()); // Do not send to your backend! Use an ID token instead.\n//   console.log('Name: ' + profile.getName());\n//   console.log('Image URL: ' + profile.getImageUrl());\n//   console.log('Email: ' + profile.getEmail());\n// }\n","angular.module('goApp')\n  .factory('Challenge', Challenge);\n\nChallenge.$inject = ['$resource'];\nfunction Challenge($resource) {\n  return new $resource('/challenges/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('ChallengesIndexController', ChallengesIndexController)\n  .controller('ChallengesNewController', ChallengesNewController)\n  .controller('ChallengesShowController', ChallengesShowController)\n  .controller('ChallengesEditController', ChallengesEditController);\n\nChallengesIndexController.$inject = ['Challenge'];\nfunction ChallengesIndexController(Challenge) {\n  const challengesIndex = this;\n\n  challengesIndex.all = Challenge.query();\n}\n\n\nChallengesNewController.$inject = ['Challenge', '$state'];\nfunction ChallengesNewController(Challenge, $state) {\n  const challengesNew = this;\n\n  challengesNew.challenge = {};\n\n  function create() {\n    Challenge.save(challengesNew.challenge, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  challengesNew.create = create;\n}\n\n//SHOW\nChallengesShowController.$inject = ['Challenge', '$state', '$auth'];\nfunction ChallengesShowController(Challenge, $state, $auth) {\n\n  const challengesShow = this;\n  challengesShow.authUser = $auth.getPayload();\n  if (challengesShow.authUser) {\n    challengesShow.authUser = challengesShow.authUser._id;\n  }\n\n  challengesShow.challenge = Challenge.get($state.params);\n  console.log(challengesShow.challenge);\n  function deleteChallenge() {\n    challengesShow.challenge.$remove(() => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  function challengeLike() {\n    challengesShow.challenge.like ++;\n    challengesShow.challenge.$update();\n  }\n\n  function participate() {\n    challengesShow.challenge.participants.data.push(challengesShow.authUser);\n    challengesShow.challenge.participants.userId.push(challengesShow.authUser);\n    challengesShow.challenge.$update((data) => {\n      console.log(data);\n    });\n  }\n\n  challengesShow.participate = participate;\n  challengesShow.incrementLikes = challengeLike;\n  challengesShow.isLoggedIn = $auth.isAuthenticated;\n  challengesShow.delete = deleteChallenge;\n}\n\nChallengesEditController.$inject = ['Challenge', '$state'];\nfunction ChallengesEditController(Challenge, $state) {\n  const challengesEdit = this;\n\n  challengesEdit.challenge = Challenge.get($state.params);\n\n  function update() {\n    challengesEdit.challenge.$update(() => {\n      $state.go('challengesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('goApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state'];\nfunction MainController($auth, $state) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  main.currentUser = $auth.getPayload();\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('home');\n      });\n  }\n  main.logout = logout;\n\n  main.message = null;\n  // const protectedStates = ['playersEdit', 'playersNew'];\n  //\n  // function secureState(e, toState) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //   }\n  // }\n\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n}\n","angular.module('goApp')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\n//INDEX\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n//CREATE\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('userIndex');\n    });\n  }\n  usersNew.create = create;\n}\n\n//SHOW & DELETE\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  User.get($state.params, (data) => {\n    usersShow.user = data;\n\n    usersShow.authUser = $auth.getPayload();\n    if (usersShow.authUser) {\n      usersShow.authUser = usersShow.authUser._id;\n    }\n\n    usersShow.incrementLikes = userLikes;\n    usersShow.isLoggedIn = $auth.isAuthenticated;\n    usersShow.delete = deleteUser;\n  });\n\n  function userLikes() {\n    if (!usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.push(usersShow.authUser);\n      usersShow.user.$update();\n    }\n  }\n\n  // function userChallenges () {\n  //   usersShow.users.activeChallenges.data.push(usersShow.authUser);\n  //   usersShow.users.activeChallenges.userId.push(usersShow.authUser);\n  //   usersShow.users.$update((data) => {\n  //     console.log(data);\n  //   });\n  // }\n  //\n  // usersShow.userChallenges = userChallenges;\n\n  // usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n}\n\n//EDIT\nUsersEditController.$inject = ['User', '$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.authUser = $auth.getPayload();\n  if (usersEdit.authUser) {\n    usersEdit.authUser = usersEdit.authUser._id;\n  }\n\n  User.get({ id: usersEdit.authUser }, (data) => {\n    usersEdit.user = data;\n\n    console.log(usersEdit.user);\n  });\n\n\n  function update() {\n    usersEdit.user.$update((data) => {\n      console.log(data.bio);\n      $state.go('usersShow', { id: usersEdit.authUser });\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular\n  .module('goApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\n\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}