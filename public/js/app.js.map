{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/challenge.js","js/controllers/challenges.js","js/controllers/main.js","js/controllers/user.js","js/models/user.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Challenge","$resource","id","update","method","ChallengesIndexController","challengesIndex","all","query","ChallengesNewController","create","save","challengesNew","challenge","ChallengesShowController","deleteChallenge","challengesShow","$remove","challengeLike","console","log","like","$update","get","params","incrementLikes","isLoggedIn","isAuthenticated","delete","ChallengesEditController","challengesEdit","MainController","logout","main","getPayload","tokenInfo","currentUser","_id","message","UsersIndexController","User","usersIndex","UsersNewController","usersNew","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","config","cuInfo","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('goApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nconst cuInfo = {};\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('challengesIndex', {\n      url: '/challenges',\n      templateUrl: '/templates/challengesIndex.html',\n      controller: 'ChallengesIndexController as challengesIndex'\n    })\n    .state('challengesNew', {\n      url: '/challenges/new',\n      templateUrl: '/templates/challengesNew.html',\n      controller: 'ChallengesNewController as challengesNew'\n    })\n    .state('challengesShow', {\n      url: '/challenges/:id',\n      templateUrl: '/templates/challengesShow.html',\n      controller: 'ChallengesShowController as challengesShow'\n    })\n    .state('challengesEdit', {\n      url: '/challenges/:id/edit',\n      templateUrl: '/templates/challengesEdit.html',\n      controller: 'ChallengesEditController as challengesEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n      // controller: 'HomeController as home'\n    })\n    .state('usersIndex', {\n      url: '/challengers',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersEdit', {\n      url: '/challengers/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('usersShow', {\n      url: '/challengers/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    });\n\n  $urlRouterProvider.otherwise('/challenges');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('goApp')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('home');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('home');\n      });\n\n  }\n  login.submit = submit;\n}\n","angular.module('goApp')\n  .factory('Challenge', Challenge);\n\nChallenge.$inject = ['$resource'];\nfunction Challenge($resource) {\n  return new $resource('/challenges/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('ChallengesIndexController', ChallengesIndexController)\n  .controller('ChallengesNewController', ChallengesNewController)\n  .controller('ChallengesShowController', ChallengesShowController)\n  .controller('ChallengesEditController', ChallengesEditController);\n\nChallengesIndexController.$inject = ['Challenge'];\nfunction ChallengesIndexController(Challenge) {\n  const challengesIndex = this;\n\n  challengesIndex.all = Challenge.query();\n}\n\n\nChallengesNewController.$inject = ['Challenge', '$state'];\nfunction ChallengesNewController(Challenge, $state) {\n  const challengesNew = this;\n\n  challengesNew.challenge = {};\n\n  function create() {\n    Challenge.save(challengesNew.challenge, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  challengesNew.create = create;\n}\n\n//SHOW\nChallengesShowController.$inject = ['Challenge', '$state', '$auth'];\nfunction ChallengesShowController(Challenge, $state, $auth) {\n\n  const challengesShow = this;\n\n  challengesShow.challenge = Challenge.get($state.params);\n\n  function deleteChallenge() {\n    challengesShow.challenge.$remove(() => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  function challengeLike() {\n    console.log(challengesShow.challenge.like);\n    challengesShow.challenge.like ++;\n    challengesShow.challenge.$update();\n  }\n\n  challengesShow.incrementLikes = challengeLike;\n  challengesShow.isLoggedIn = $auth.isAuthenticated;\n  challengesShow.delete = deleteChallenge;\n}\n\nChallengesEditController.$inject = ['Challenge', '$state'];\nfunction ChallengesEditController(Challenge, $state) {\n  const challengesEdit = this;\n\n  challengesEdit.challenge = Challenge.get($state.params);\n\n  function update() {\n    challengesEdit.challenge.$update(() => {\n      $state.go('challengesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('goApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state'];\nfunction MainController($auth, $state) {\n  const main = this;\n\n  console.log($auth.getPayload());\n  const tokenInfo = $auth.getPayload();\n  main.currentUser = tokenInfo._id;\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  console.log(main.currentUser);\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('home');\n      });\n  }\n  main.logout = logout;\n\n  main.message = null;\n  // const protectedStates = ['playersEdit', 'playersNew'];\n  //\n  // function secureState(e, toState) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //   }\n  // }\n\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n}\n","angular.module('goApp')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\n//INDEX\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n  console.log(usersIndex.user);\n}\n\n//CREATE\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('userIndex');\n    });\n  }\n  usersNew.create = create;\n}\n\n//SHOW & DELETE\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n\n  usersShow.user = User.get($state.params);\n  console.log(usersShow.user);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n  usersShow.delete = deleteUser;\n}\n\n//EDIT\nUsersEditController.$inject = ['User', '$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n  usersEdit.user = User.get({ id: $auth.getPayload()._id });\n\n  console.log(usersEdit.user);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular.module('goApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}