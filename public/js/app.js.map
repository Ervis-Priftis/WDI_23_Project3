{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/challenge.js","js/controllers/challenges.js","js/services/currentUser.js","js/directives/googleMap.js","js/controllers/main.js","js/controllers/profile.js","js/controllers/stories.js","js/models/story.js","js/models/user.js","js/services/user.js","js/controllers/users.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","ConfirmController","$http","method","params","confirmationCode","LoginController","User","login","isLoggedIn","console","log","credentials","currentUser","getPayload","get","id","_id","data","account","Challenge","$resource","update","ChallengesIndexController","challengesIndex","all","query","ChallengesNewController","create","save","challengesNew","challenge","ChallengesShowController","deleteChallenge","challengesShow","$remove","challengeLike","userIdIndex","like","indexOf","authUser","includes","push","$update","splice","participate","participants","userId","userProfile","activeChallenges","Unparticipate","indexId","togglePopUp","popUpActive","$promise","incrementLikes","isAuthenticated","delete","ChallengesEditController","challengesEdit","googleMap","$window","restrict","replace","template","scope","link","element","$watch","map","google","maps","Map","center","location","zoom","Marker","position","animation","Animation","DROP","MainController","toggleMenu","main","menuActive","ProfileController","logout","profile","currentUserId","message","StoriesIndexController","Story","storiesIndex","StoriesNewController","storiesNew","story","StoriesShowController","deleteStory","storiesShow","authStory","StoriesEditController","storiesEdit","bio","self","UsersIndexController","usersIndex","UsersNewController","usersNew","UsersShowController","userLikes","usersShow","likes","deleteUser","UsersEditController","usersEdit","angular","module","config","$inject","factory","service","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('goApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('challengesIndex', {\n      url: '/challenges',\n      templateUrl: '/templates/challengesIndex.html',\n      controller: 'ChallengesIndexController as challengesIndex'\n    })\n    .state('challengesNew', {\n      url: '/challenges/new',\n      templateUrl: '/templates/challengesNew.html',\n      controller: 'ChallengesNewController as challengesNew'\n    })\n    .state('challengesShow', {\n      url: '/challenges/:id',\n      templateUrl: '/templates/challengesShow.html',\n      controller: 'ChallengesShowController as challengesShow'\n    })\n    .state('challengesEdit', {\n      url: '/challenges/:id/edit',\n      templateUrl: '/templates/challengesEdit.html',\n      controller: 'ChallengesEditController as challengesEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('registerInterim', {\n      url: '/registerInterim',\n      templateUrl: '/templates/registerInterim.html'\n    })\n    .state('confirm', {\n      url: '/confirm/:confirmationCode',\n      templateUrl: '/templates/confirm.html',\n      controller: 'ConfirmController as confirm'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n      // controller: 'HomeController as home'\n    })\n    .state('usersIndex', {\n      url: '/challengers',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersEdit', {\n      url: '/challengers/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('usersShow', {\n      url: '/challengers/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('storiesIndex', {\n      url: '/stories',\n      templateUrl: '/templates/storyIndex.html',\n      controller: 'StoriesIndexController as storiesIndex'\n    })\n    .state('storysEdit', {\n      url: '/stories/:id/edit',\n      templateUrl: '/templates/storyEdit.html',\n      controller: 'StoriesEditController as storiesEdit'\n    })\n    .state('storiesShow', {\n      url: '/stories/:id',\n      templateUrl: '/templates/storyShow.html',\n      controller: 'StoriesShowController as storiesShow'\n    });\n\n  $urlRouterProvider.otherwise('/challenges');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('goApp')\n.controller('RegisterController', RegisterController)\n.controller('ConfirmController', ConfirmController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('registerInterim');\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nConfirmController.$inject = ['$http', '$state'];\nfunction ConfirmController($http, $state) {\n  $http({\n    method: 'POST',\n    url: `/confirm/${$state.params.confirmationCode}`\n  });\n}\n\n\nLoginController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction LoginController($auth, $state, User, user) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    login.isLoggedIn = true;\n    console.log(login.isLoggedIn);\n    $auth.login(login.credentials)\n    .then(() => {\n      login.currentUser = $auth.getPayload();\n\n      if(login.currentUser) {\n        User.get({ id: login.currentUser._id }, (data) => {\n          user.account = data;\n          console.log(user.currentUser);\n        });\n      }\n      $state.go('home');\n    });\n  }\n  login.submit = submit;\n}\n","angular.module('goApp')\n  .factory('Challenge', Challenge);\n\nChallenge.$inject = ['$resource'];\nfunction Challenge($resource) {\n  return new $resource('/challenges/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('ChallengesIndexController', ChallengesIndexController)\n  .controller('ChallengesNewController', ChallengesNewController)\n  .controller('ChallengesShowController', ChallengesShowController)\n  .controller('ChallengesEditController', ChallengesEditController);\n\nChallengesIndexController.$inject = ['Challenge'];\nfunction ChallengesIndexController(Challenge) {\n  const challengesIndex = this;\n  challengesIndex.all = Challenge.query();\n  // console.log('In the challenge index controller');\n}\n\n\nChallengesNewController.$inject = ['Challenge', '$state'];\nfunction ChallengesNewController(Challenge, $state) {\n  const challengesNew = this;\n\n  challengesNew.challenge = {};\n\n  function create() {\n    Challenge.save(challengesNew.challenge, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  challengesNew.create = create;\n}\n\n//SHOW\nChallengesShowController.$inject = ['Challenge', 'User', '$state', '$auth'];\nfunction ChallengesShowController(Challenge, User, $state, $auth) {\n\n  const challengesShow = this;\n  challengesShow.authUser = $auth.getPayload();\n  if (challengesShow.authUser) {\n    challengesShow.authUser = challengesShow.authUser._id;\n    User.get({id: challengesShow.authUser}, (data)=> {\n      challengesShow.userProfile = data;\n    });\n  }\n\n  Challenge.get($state.params).$promise.then((challenge) => {\n    challengesShow.challenge = challenge;\n  });\n\n  function deleteChallenge() {\n    challengesShow.challenge.$remove(() => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  function challengeLike() {\n    const userIdIndex = challengesShow.challenge.like.indexOf(challengesShow.authUser);\n\n    if (!challengesShow.challenge.like.includes(challengesShow.authUser) && !!challengesShow.authUser) {\n      challengesShow.challenge.like.push(challengesShow.authUser);\n      challengesShow.challenge.$update();\n    } else if (challengesShow.challenge.like.includes(challengesShow.authUser) && !!challengesShow.authUser) {\n      challengesShow.challenge.like.splice(userIdIndex, 1);\n      challengesShow.challenge.$update();\n    }\n  }\n\n  function participate() {\n    // Add User Id to challenge model\n    challengesShow.challenge.participants.data.push(challengesShow.authUser);\n    challengesShow.challenge.participants.userId.push(challengesShow.authUser);\n\n    challengesShow.challenge.$update((data) => {\n      console.log(data);\n      // console.log(challengesShow.challenge.participants.userId);\n    });\n\n    // Add Challenge Id to user Model\n    challengesShow.userProfile.activeChallenges.push(challengesShow.challenge._id);\n\n    // Update both\n    challengesShow.challenge.$update();\n    challengesShow.userProfile.$update();\n\n  }\n\n  function Unparticipate() {\n    const indexId = challengesShow.challenge.participants.userId.indexOf(challengesShow.authUser);\n    challengesShow.challenge.participants.userId.splice(indexId, 1);\n    console.log(challengesShow.challenge.participants.userId);\n  }\n\n  function togglePopUp() {\n    console.log('In toggle pop up');\n    challengesShow.popUpActive = true;\n  }\n\n  challengesShow.togglePopUp = togglePopUp;\n  challengesShow.Unparticipate = Unparticipate;\n  challengesShow.participate = participate;\n  challengesShow.incrementLikes = challengeLike;\n  challengesShow.isLoggedIn = $auth.isAuthenticated;\n  challengesShow.delete = deleteChallenge;\n}\n\nChallengesEditController.$inject = ['Challenge', '$state'];\nfunction ChallengesEditController(Challenge, $state) {\n  const challengesEdit = this;\n\n  challengesEdit.challenge = Challenge.get($state.params);\n\n  function update() {\n    challengesEdit.challenge.$update(() => {\n      $state.go('challengesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('goApp')\n  .service('currentUser', currentUser);\n\ncurrentUser.$inject = ['User', '$auth'];\nfunction currentUser (User, $auth) {\n  var user = this;\n\n  // const isLoggedIn = $auth.isAuthenticated;\n  const currentUser = $auth.getPayload();\n\n  if(currentUser) {\n    User.get({ id: currentUser._id }, (data) => {\n      user.account = data;\n    });\n  }\n}\n","angular.module('goApp')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window', 'Challenge'];\n\nfunction googleMap($window, Challenge) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\">Google Map HERE</div>',\n    scope: {\n      challenge: '='\n    },\n    link: function(scope, element) {\n      scope.$watch('challenge', () => {\n        if(scope.challenge) {\n\n          const map = new $window.google.maps.Map(element[0], {\n            center: scope.challenge.location,\n            zoom: 12\n          });\n\n          new $window.google.maps.Marker({\n            position: scope.challenge.location,\n            map: map,\n            animation: $window.google.maps.Animation.DROP\n          });\n        }\n      });\n\n    }\n  };\n}\n","angular.module('goApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth'];\nfunction MainController($auth) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.currentUser = $auth.getPayload();\n\n  function toggleMenu() {\n    console.log('in toggle menu');\n    main.menuActive = !main.menuActive;\n    console.log(main.menuActive);\n  }\n  main.toggleMenu = toggleMenu;\n\n\n\n\n\n\n\n\n\n  // main.getProfile = getProfile;\n\n  // const protectedStates = ['playersEdit', 'playersNew'];\n  //\n  // function secureState(e, toState) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //   }\n  // }\n\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n}\n","angular.module('goApp')\n  .controller('ProfileController', ProfileController);\n\nProfileController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction ProfileController($auth, $state, User, user) {\n  const profile = this;\n\n  profile.isLoggedIn = $auth.isAuthenticated;\n\n  if ($auth.getPayload()){\n    profile.currentUserId = $auth.getPayload()._id;\n  }\n  profile.currentUser = user;\n\n  if(profile.isLoggedIn()) {\n    User.get({ id: profile.currentUserId }, (data) => {\n      user.account = data;\n    });\n  }\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        profile.account = null;\n        $state.go('home');\n      });\n  }\n  profile.logout = logout;\n\n  profile.message = null;\n}\n","angular.module('goApp')\n  .controller('StoriesIndexController', StoriesIndexController)\n  .controller('StoriesNewController', StoriesNewController)\n  .controller('StoriesShowController', StoriesShowController)\n  .controller('StoriesEditController', StoriesEditController);\n\n\n//INDEX\nStoriesIndexController.$inject = ['Story'];\nfunction StoriesIndexController(Story) {\n  const storiesIndex = this;\n  storiesIndex.all = Story.query();\n}\n\n//CREATE\nStoriesNewController.$inject = ['Story', '$state'];\nfunction StoriesNewController(Story, $state) {\n  const storiesNew = this;\n  storiesNew.story = {};\n\n  function create() {\n    Story.save(storiesNew.story, () => {\n      $state.go('storyIndex');\n    });\n  }\n  storiesNew.create = create;\n}\n\n//SHOW & DELETE\nStoriesShowController.$inject = ['Story', '$state', '$auth'];\nfunction StoriesShowController(Story, $state, $auth) {\n  const storiesShow = this;\n\n  Story.get($state.params, (data) => {\n    storiesShow.story = data;\n\n    storiesShow.authStory = $auth.getPayload();\n    if (storiesShow.authStory) {\n      storiesShow.authStory = storiesShow.authStory._id;\n    }\n\n    storiesShow.isLoggedIn = $auth.isAuthenticated;\n    storiesShow.delete = deleteStory;\n  });\n\n  function deleteStory() {\n    storiesShow.story.$remove(() => {\n      $state.go('storiesIndex');\n    });\n  }\n}\n\n//EDIT\nStoriesEditController.$inject = ['Story', '$state', '$auth'];\nfunction StoriesEditController(Story, $state, $auth) {\n  const storiesEdit = this;\n\n  storiesEdit.authUser = $auth.getPayload();\n  if (storiesEdit.authUser) {\n    storiesEdit.authUser = storiesEdit.authUser._id;\n  }\n\n  Story.get({ id: storiesEdit.authUser }, (data) => {\n    storiesEdit.story = data;\n  });\n\n  function update() {\n    storiesEdit.story.$update((data) => {\n      console.log(data.bio);\n      $state.go('storiesShow', { id: storiesEdit.authUser });\n    });\n  }\n\n  storiesEdit.update = update;\n}\n","angular\n  .module('goApp')\n  .factory('Story', Story);\n\nStory.$inject = ['$resource'];\n\nfunction Story($resource) {\n  return new $resource('/stories/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular\n  .module('goApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\n\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .service('user', user);\n\nfunction user() {\n  var self = this;\n\n  self.account = {};\n}\n","angular.module('goApp')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\n//INDEX\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n//CREATE\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('userIndex');\n    });\n  }\n  usersNew.create = create;\n}\n\n//SHOW & DELETE\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  User.get($state.params, (data) => {\n    usersShow.user = data;\n\n    usersShow.authUser = $auth.getPayload();\n    if (usersShow.authUser) {\n      usersShow.authUser = usersShow.authUser._id;\n    }\n\n    usersShow.incrementLikes = userLikes;\n    usersShow.isLoggedIn = $auth.isAuthenticated;\n    usersShow.delete = deleteUser;\n  });\n\n  function userLikes() {\n    const userIdIndex = usersShow.user.likes.indexOf(usersShow.authUser);\n\n    if (!usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.push(usersShow.authUser);\n      usersShow.user.$update();\n    } else if (usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.splice(userIdIndex, 1);\n      usersShow.user.$update();\n    }\n  }\n\n  // function userChallenges () {\n  //   usersShow.users.activeChallenges.data.push(usersShow.authUser);\n  //   usersShow.users.activeChallenges.userId.push(usersShow.authUser);\n  //   usersShow.users.$update((data) => {\n  //     console.log(data);\n  //   });\n  // }\n  //\n  // usersShow.userChallenges = userChallenges;\n\n  // usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n}\n\n//EDIT\nUsersEditController.$inject = ['User', '$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.authUser = $auth.getPayload();\n  if (usersEdit.authUser) {\n    usersEdit.authUser = usersEdit.authUser._id;\n  }\n\n  User.get({ id: usersEdit.authUser }, (data) => {\n    usersEdit.user = data;\n\n    console.log(usersEdit.user);\n  });\n\n\n  function update() {\n    usersEdit.user.$update((data) => {\n      console.log(data.bio);\n      $state.go('usersShow', { id: usersEdit.authUser });\n    });\n  }\n\n  usersEdit.update = update;\n}\n"]}